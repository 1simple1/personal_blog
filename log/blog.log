2020-11-08 09:20:35.102  INFO 6964 --- [main] c.s.p.PersonalBlogApplication            : Starting PersonalBlogApplication on m with PID 6964 (D:\myblog-mybatis\target\classes started by 　　　 in D:\myblog-mybatis)
2020-11-08 09:20:35.114 DEBUG 6964 --- [main] c.s.p.PersonalBlogApplication            : Running with Spring Boot v2.3.4.RELEASE, Spring v5.2.9.RELEASE
2020-11-08 09:20:35.118  INFO 6964 --- [main] c.s.p.PersonalBlogApplication            : No active profile set, falling back to default profiles: default
2020-11-08 09:20:36.790  INFO 6964 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-11-08 09:20:36.798  INFO 6964 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-11-08 09:20:36.802  INFO 6964 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.38]
2020-11-08 09:20:36.922  INFO 6964 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-11-08 09:20:36.922  INFO 6964 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1696 ms
2020-11-08 09:20:37.778  INFO 6964 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-11-08 09:20:37.994  INFO 6964 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-11-08 09:20:38.286  INFO 6964 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-11-08 09:20:38.298  INFO 6964 --- [main] c.s.p.PersonalBlogApplication            : Started PersonalBlogApplication in 4.139 seconds (JVM running for 5.927)
2020-11-08 09:22:00.158  INFO 6964 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-11-08 09:22:00.158  INFO 6964 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-11-08 09:22:00.170  INFO 6964 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 12 ms
2020-11-08 09:22:00.222  INFO 6964 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.index', args参数：[1, {}]}
2020-11-08 09:22:00.250  INFO 6964 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-11-08 09:22:04.555  INFO 6964 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/login', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.LoginController.login', args参数：[admin, admin, org.apache.catalina.session.StandardSessionFacade@44944749, {}]}
2020-11-08 09:22:11.462 ERROR 6964 --- [http-nio-8080-exec-1] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Exception during pool initialization.

java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:906) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:831) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:456) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:246) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:197) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:358) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:477) [HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:560) [HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115) [HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112) [HikariCP-3.4.5.jar:na]
	at com.github.pagehelper.page.PageAutoDialect.getUrl(PageAutoDialect.java:177) [pagehelper-5.1.10.jar:na]
	at com.github.pagehelper.page.PageAutoDialect.getDialect(PageAutoDialect.java:203) [pagehelper-5.1.10.jar:na]
	at com.github.pagehelper.page.PageAutoDialect.initDelegateDialect(PageAutoDialect.java:99) [pagehelper-5.1.10.jar:na]
	at com.github.pagehelper.PageHelper.skip(PageHelper.java:66) [pagehelper-5.1.10.jar:na]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:93) [pagehelper-5.1.10.jar:na]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) [mybatis-3.5.5.jar:3.5.5]
	at com.sun.proxy.$Proxy97.query(Unknown Source) [na:na]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) [mybatis-3.5.5.jar:3.5.5]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) [mybatis-3.5.5.jar:3.5.5]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) [mybatis-spring-2.0.5.jar:2.0.5]
	at com.sun.proxy.$Proxy68.selectList(Unknown Source) [na:na]
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223) [mybatis-spring-2.0.5.jar:2.0.5]
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147) [mybatis-3.5.5.jar:3.5.5]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80) [mybatis-3.5.5.jar:3.5.5]
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:152) [mybatis-3.5.5.jar:3.5.5]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85) [mybatis-3.5.5.jar:3.5.5]
	at com.sun.proxy.$Proxy71.findAll(Unknown Source) [na:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139) [spring-tx-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at com.sun.proxy.$Proxy72.findAll(Unknown Source) [na:na]
	at com.simplem.personal_blog.service.impl.BlogServiceImpl.getIndexBlog(BlogServiceImpl.java:51) [classes/:na]
	at com.simplem.personal_blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$bc7ca80b.invoke(<generated>) [classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) [spring-core-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at com.simplem.personal_blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$15a2bc1d.getIndexBlog(<generated>) [classes/:na]
	at com.simplem.personal_blog.controller.IndexController.index(IndexController.java:48) [classes/:na]
	at com.simplem.personal_blog.controller.IndexController$$FastClassBySpringCGLIB$$20f98fc9.invoke(<generated>) [classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) [spring-core-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at com.simplem.personal_blog.controller.IndexController$$EnhancerBySpringCGLIB$$6ffa6b5e.index(<generated>) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626) [tomcat-embed-core-9.0.38.jar:4.0.FR]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733) [tomcat-embed-core-9.0.38.jar:4.0.FR]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: com.mysql.cj.exceptions.CJCommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_181]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_181]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:91) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.NativeSession.connect(NativeSession.java:144) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:850) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	... 115 common frames omitted
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method) ~[na:1.8.0_181]
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85) ~[na:1.8.0_181]
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350) ~[na:1.8.0_181]
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206) ~[na:1.8.0_181]
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188) ~[na:1.8.0_181]
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172) ~[na:1.8.0_181]
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392) ~[na:1.8.0_181]
	at java.net.Socket.connect(Socket.java:589) ~[na:1.8.0_181]
	at com.mysql.cj.protocol.StandardSocketFactory.connect(StandardSocketFactory.java:155) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:65) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	... 117 common frames omitted

2020-11-08 09:22:11.486  INFO 6964 --- [http-nio-8080-exec-6] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-11-08 09:22:11.518 ERROR 6964 --- [http-nio-8080-exec-1] c.s.p.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/,Exception e : {}

org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: com.github.pagehelper.PageException: java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
### Cause: com.github.pagehelper.PageException: java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92) ~[mybatis-spring-2.0.5.jar:2.0.5]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440) ~[mybatis-spring-2.0.5.jar:2.0.5]
	at com.sun.proxy.$Proxy68.selectList(Unknown Source) ~[na:na]
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223) ~[mybatis-spring-2.0.5.jar:2.0.5]
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147) ~[mybatis-3.5.5.jar:3.5.5]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80) ~[mybatis-3.5.5.jar:3.5.5]
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:152) ~[mybatis-3.5.5.jar:3.5.5]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85) ~[mybatis-3.5.5.jar:3.5.5]
	at com.sun.proxy.$Proxy71.findAll(Unknown Source) ~[na:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139) ~[spring-tx-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at com.sun.proxy.$Proxy72.findAll(Unknown Source) ~[na:na]
	at com.simplem.personal_blog.service.impl.BlogServiceImpl.getIndexBlog(BlogServiceImpl.java:51) ~[classes/:na]
	at com.simplem.personal_blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$bc7ca80b.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at com.simplem.personal_blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$15a2bc1d.getIndexBlog(<generated>) ~[classes/:na]
	at com.simplem.personal_blog.controller.IndexController.index(IndexController.java:48) ~[classes/:na]
	at com.simplem.personal_blog.controller.IndexController$$FastClassBySpringCGLIB$$20f98fc9.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at com.simplem.personal_blog.controller.IndexController$$EnhancerBySpringCGLIB$$6ffa6b5e.index(<generated>) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105) ~[spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878) ~[spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792) ~[spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626) [tomcat-embed-core-9.0.38.jar:4.0.FR]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733) [tomcat-embed-core-9.0.38.jar:4.0.FR]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: com.github.pagehelper.PageException: java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
### Cause: com.github.pagehelper.PageException: java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30) ~[mybatis-3.5.5.jar:3.5.5]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:149) ~[mybatis-3.5.5.jar:3.5.5]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.5.jar:3.5.5]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.5.jar:2.0.5]
	... 90 common frames omitted
Caused by: com.github.pagehelper.PageException: java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at com.github.pagehelper.page.PageAutoDialect.getUrl(PageAutoDialect.java:180) ~[pagehelper-5.1.10.jar:na]
	at com.github.pagehelper.page.PageAutoDialect.getDialect(PageAutoDialect.java:203) ~[pagehelper-5.1.10.jar:na]
	at com.github.pagehelper.page.PageAutoDialect.initDelegateDialect(PageAutoDialect.java:99) ~[pagehelper-5.1.10.jar:na]
	at com.github.pagehelper.PageHelper.skip(PageHelper.java:66) ~[pagehelper-5.1.10.jar:na]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:93) ~[pagehelper-5.1.10.jar:na]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.5.jar:3.5.5]
	at com.sun.proxy.$Proxy97.query(Unknown Source) ~[na:na]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.5.jar:3.5.5]
	... 96 common frames omitted
Caused by: java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:906) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:831) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:456) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:246) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:197) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:358) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:477) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:560) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112) ~[HikariCP-3.4.5.jar:na]
	at com.github.pagehelper.page.PageAutoDialect.getUrl(PageAutoDialect.java:177) ~[pagehelper-5.1.10.jar:na]
	... 103 common frames omitted
Caused by: com.mysql.cj.exceptions.CJCommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_181]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_181]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:91) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.NativeSession.connect(NativeSession.java:144) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:850) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	... 115 common frames omitted
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method) ~[na:1.8.0_181]
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85) ~[na:1.8.0_181]
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350) ~[na:1.8.0_181]
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206) ~[na:1.8.0_181]
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188) ~[na:1.8.0_181]
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172) ~[na:1.8.0_181]
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392) ~[na:1.8.0_181]
	at java.net.Socket.connect(Socket.java:589) ~[na:1.8.0_181]
	at com.mysql.cj.protocol.StandardSocketFactory.connect(StandardSocketFactory.java:155) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:65) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	... 117 common frames omitted

2020-11-08 09:22:22.593 ERROR 6964 --- [http-nio-8080-exec-6] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Exception during pool initialization.

java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:906) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:831) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:456) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:246) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:197) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:358) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:477) [HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:560) [HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115) [HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112) [HikariCP-3.4.5.jar:na]
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:261) [spring-jdbc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.startTransaction(AbstractPlatformTransactionManager.java:400) [spring-tx-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:373) [spring-tx-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:574) [spring-tx-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:361) [spring-tx-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118) [spring-tx-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at com.simplem.personal_blog.service.impl.UserServiceImpl$$EnhancerBySpringCGLIB$$93ecd722.login(<generated>) [classes/:na]
	at com.simplem.personal_blog.controller.admin.LoginController.login(LoginController.java:31) [classes/:na]
	at com.simplem.personal_blog.controller.admin.LoginController$$FastClassBySpringCGLIB$$c67298c1.invoke(<generated>) [classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) [spring-core-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at com.simplem.personal_blog.controller.admin.LoginController$$EnhancerBySpringCGLIB$$eef6e146.login(<generated>) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652) [tomcat-embed-core-9.0.38.jar:4.0.FR]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733) [tomcat-embed-core-9.0.38.jar:4.0.FR]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: com.mysql.cj.exceptions.CJCommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_181]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_181]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:91) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.NativeSession.connect(NativeSession.java:144) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:850) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	... 88 common frames omitted
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method) ~[na:1.8.0_181]
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85) ~[na:1.8.0_181]
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350) ~[na:1.8.0_181]
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206) ~[na:1.8.0_181]
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188) ~[na:1.8.0_181]
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172) ~[na:1.8.0_181]
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392) ~[na:1.8.0_181]
	at java.net.Socket.connect(Socket.java:589) ~[na:1.8.0_181]
	at com.mysql.cj.protocol.StandardSocketFactory.connect(StandardSocketFactory.java:155) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:65) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	... 90 common frames omitted

2020-11-08 09:22:22.602 ERROR 6964 --- [http-nio-8080-exec-6] c.s.p.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/admin/login,Exception e : {}

org.springframework.transaction.CannotCreateTransactionException: Could not open JDBC Connection for transaction; nested exception is java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:305) ~[spring-jdbc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.startTransaction(AbstractPlatformTransactionManager.java:400) ~[spring-tx-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:373) ~[spring-tx-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:574) ~[spring-tx-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:361) ~[spring-tx-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118) ~[spring-tx-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at com.simplem.personal_blog.service.impl.UserServiceImpl$$EnhancerBySpringCGLIB$$93ecd722.login(<generated>) ~[classes/:na]
	at com.simplem.personal_blog.controller.admin.LoginController.login(LoginController.java:31) ~[classes/:na]
	at com.simplem.personal_blog.controller.admin.LoginController$$FastClassBySpringCGLIB$$c67298c1.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at com.simplem.personal_blog.controller.admin.LoginController$$EnhancerBySpringCGLIB$$eef6e146.login(<generated>) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105) ~[spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878) ~[spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792) ~[spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652) [tomcat-embed-core-9.0.38.jar:4.0.FR]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733) [tomcat-embed-core-9.0.38.jar:4.0.FR]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:906) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:831) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:456) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:246) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:197) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:358) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:477) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:560) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112) ~[HikariCP-3.4.5.jar:na]
	at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:261) ~[spring-jdbc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	... 76 common frames omitted
Caused by: com.mysql.cj.exceptions.CJCommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_181]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_181]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:91) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.NativeSession.connect(NativeSession.java:144) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:850) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	... 88 common frames omitted
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method) ~[na:1.8.0_181]
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85) ~[na:1.8.0_181]
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350) ~[na:1.8.0_181]
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206) ~[na:1.8.0_181]
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188) ~[na:1.8.0_181]
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172) ~[na:1.8.0_181]
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392) ~[na:1.8.0_181]
	at java.net.Socket.connect(Socket.java:589) ~[na:1.8.0_181]
	at com.mysql.cj.protocol.StandardSocketFactory.connect(StandardSocketFactory.java:155) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:65) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	... 90 common frames omitted

2020-11-08 09:23:20.897  INFO 6964 --- [http-nio-8080-exec-9] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/login', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.LoginController.login', args参数：[admin, admin, org.apache.catalina.session.StandardSessionFacade@44944749, {}]}
2020-11-08 09:23:20.901  INFO 6964 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-11-08 09:23:21.104  INFO 6964 --- [http-nio-8080-exec-9] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-11-08 09:23:21.132 DEBUG 6964 --- [http-nio-8080-exec-9] c.s.p.d.U.queryByUsernameAndPassword     : ==>  Preparing: select id,nickname,avatar,email from blog.t_user where username = ? and password = ?;
2020-11-08 09:23:21.168 DEBUG 6964 --- [http-nio-8080-exec-9] c.s.p.d.U.queryByUsernameAndPassword     : ==> Parameters: admin(String), 21232f297a57a5a743894a0e4a801fc3(String)
2020-11-08 09:23:21.216 DEBUG 6964 --- [http-nio-8080-exec-9] c.s.p.d.U.queryByUsernameAndPassword     : <==      Total: 1
2020-11-08 09:23:21.228  INFO 6964 --- [http-nio-8080-exec-9] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/index
2020-11-08 09:23:30.168  INFO 6964 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.index', args参数：[1, {}]}
2020-11-08 09:23:30.278 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.findAll_COUNT       : ==>  Preparing: SELECT count(0) FROM (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published
2020-11-08 09:23:30.278 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.findAll_COUNT       : ==> Parameters: 
2020-11-08 09:23:30.290 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.findAll_COUNT       : <==      Total: 1
2020-11-08 09:23:30.290 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.findAll             : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published order by b.update_time desc LIMIT ?
2020-11-08 09:23:30.294 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.findAll             : ==> Parameters: 5(Integer)
2020-11-08 09:23:30.310 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.findAll             : <==      Total: 4
2020-11-08 09:23:30.314 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.TypeMapper.getIndexType        : ==>  Preparing: select b.id bid, b.title, b.type_id, t.id tid, t.name from t_type t inner join t_blog b on t.id = b.type_id
2020-11-08 09:23:30.314 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.TypeMapper.getIndexType        : ==> Parameters: 
2020-11-08 09:23:30.318 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.TypeMapper.getIndexType        : <==      Total: 4
2020-11-08 09:23:30.330 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.TagMapper.getIndexTag          : ==>  Preparing: SELECT t.id tid,t.name, b.id bid FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id
2020-11-08 09:23:30.330 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.TagMapper.getIndexTag          : ==> Parameters: 
2020-11-08 09:23:30.338 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.TagMapper.getIndexTag          : <==      Total: 7
2020-11-08 09:23:30.342 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.findRecommendBlogs  : ==>  Preparing: select b.id, b.title, b.update_time from t_blog b where b.published and b.commentabled order by update_time desc limit 5
2020-11-08 09:23:30.342 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.findRecommendBlogs  : ==> Parameters: 
2020-11-08 09:23:30.346 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.findRecommendBlogs  : <==      Total: 4
2020-11-08 09:23:30.346  INFO 6964 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: index
2020-11-08 09:23:30.870  INFO 6964 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:23:30.870 DEBUG 6964 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:23:30.870 DEBUG 6964 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:23:30.874 DEBUG 6964 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:23:30.874  INFO 6964 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:24:09.374  INFO 6964 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/types', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TypeController.getTypes', args参数：[{}, 1]}
2020-11-08 09:24:09.418 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_type
2020-11-08 09:24:09.418 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==> Parameters: 
2020-11-08 09:24:09.422 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : <==      Total: 1
2020-11-08 09:24:09.434 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: SELECT id, name FROM blog.t_type order by id desc LIMIT ?
2020-11-08 09:24:09.434 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 5(Integer)
2020-11-08 09:24:09.442 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 5
2020-11-08 09:24:09.446  INFO 6964 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/types
2020-11-08 09:24:13.443  INFO 6964 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/types', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TypeController.getTypes', args参数：[{}, 2]}
2020-11-08 09:24:13.451 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_type
2020-11-08 09:24:13.451 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==> Parameters: 
2020-11-08 09:24:13.455 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : <==      Total: 1
2020-11-08 09:24:13.459 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: SELECT id, name FROM blog.t_type order by id desc LIMIT ?, ?
2020-11-08 09:24:13.459 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 5(Integer), 5(Integer)
2020-11-08 09:24:13.463 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 5
2020-11-08 09:24:13.467  INFO 6964 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/types
2020-11-08 09:24:16.365  INFO 6964 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/types', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TypeController.getTypes', args参数：[{}, 3]}
2020-11-08 09:24:16.369 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_type
2020-11-08 09:24:16.369 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==> Parameters: 
2020-11-08 09:24:16.373 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : <==      Total: 1
2020-11-08 09:24:16.377 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: SELECT id, name FROM blog.t_type order by id desc LIMIT ?, ?
2020-11-08 09:24:16.377 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 10(Integer), 5(Integer)
2020-11-08 09:24:16.385 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 5
2020-11-08 09:24:16.389  INFO 6964 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/types
2020-11-08 09:24:27.128  INFO 6964 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/types/74/input', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TypeController.editorType', args参数：[74, {}]}
2020-11-08 09:24:27.132 DEBUG 6964 --- [http-nio-8080-exec-1] c.s.p.dao.TypeMapper.selectById          : ==>  Preparing: select id,name from blog.t_type where id = ?;
2020-11-08 09:24:27.132 DEBUG 6964 --- [http-nio-8080-exec-1] c.s.p.dao.TypeMapper.selectById          : ==> Parameters: 74(Long)
2020-11-08 09:24:27.140 DEBUG 6964 --- [http-nio-8080-exec-1] c.s.p.dao.TypeMapper.selectById          : <==      Total: 1
2020-11-08 09:24:27.144  INFO 6964 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/type-input
2020-11-08 09:24:33.132  WARN 6964 --- [http-nio-8080-exec-6] o.springframework.validation.DataBinder  : Skipping URI variable 'id' because request contains bind value with same name.
2020-11-08 09:24:33.140  INFO 6964 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/types/74', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TypeController.changeType', args参数：[Type(id=74, name=学习笔记, blogs=[]), 74, {}, {type=Type(id=74, name=学习笔记, blogs=[]), org.springframework.validation.BindingResult.type=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2020-11-08 09:24:33.144 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.TypeMapper.selectByName        : ==>  Preparing: select * from blog.t_type where name = ?
2020-11-08 09:24:33.144 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.TypeMapper.selectByName        : ==> Parameters: 学习笔记(String)
2020-11-08 09:24:33.148 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.TypeMapper.selectByName        : <==      Total: 0
2020-11-08 09:24:33.148 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.TypeMapper.updateTypeById      : ==>  Preparing: update blog.t_type set name = ? where id = ?;
2020-11-08 09:24:33.152 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.TypeMapper.updateTypeById      : ==> Parameters: 学习笔记(String), 74(Long)
2020-11-08 09:24:33.164 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.TypeMapper.updateTypeById      : <==    Updates: 1
2020-11-08 09:24:33.164  INFO 6964 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: redirect:/admin/types
2020-11-08 09:24:33.208  INFO 6964 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/types', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TypeController.getTypes', args参数：[{success=修改成功}, 1]}
2020-11-08 09:24:33.208 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_type
2020-11-08 09:24:33.208 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==> Parameters: 
2020-11-08 09:24:33.212 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : <==      Total: 1
2020-11-08 09:24:33.212 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: SELECT id, name FROM blog.t_type order by id desc LIMIT ?
2020-11-08 09:24:33.216 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 5(Integer)
2020-11-08 09:24:33.216 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 5
2020-11-08 09:24:33.216  INFO 6964 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/types
2020-11-08 09:25:51.705  INFO 6964 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/types/-1', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.TypeShowController.show', args参数：[-1, {}, 1]}
2020-11-08 09:25:51.721 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.getIndexType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_type t INNER JOIN t_blog b ON t.id = b.type_id
2020-11-08 09:25:51.721 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.getIndexType_COUNT  : ==> Parameters: 
2020-11-08 09:25:51.725 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.getIndexType_COUNT  : <==      Total: 1
2020-11-08 09:25:51.729 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.getIndexType        : ==>  Preparing: select b.id bid, b.title, b.type_id, t.id tid, t.name from t_type t inner join t_blog b on t.id = b.type_id LIMIT ?
2020-11-08 09:25:51.729 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.getIndexType        : ==> Parameters: 100(Integer)
2020-11-08 09:25:51.745 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.getIndexType        : <==      Total: 4
2020-11-08 09:25:51.773 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.d.B.findAllByTypeId_COUNT          : ==>  Preparing: SELECT count(0) FROM (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published AND b.type_id = ?
2020-11-08 09:25:51.773 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.d.B.findAllByTypeId_COUNT          : ==> Parameters: 81(Long)
2020-11-08 09:25:51.777 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.d.B.findAllByTypeId_COUNT          : <==      Total: 1
2020-11-08 09:25:51.781 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findAllByTypeId     : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published and b.type_id = ? order by b.update_time desc LIMIT ?
2020-11-08 09:25:51.781 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findAllByTypeId     : ==> Parameters: 81(Long), 5(Integer)
2020-11-08 09:25:51.781 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findAllByTypeId     : <==      Total: 1
2020-11-08 09:25:51.785  INFO 6964 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: type
2020-11-08 09:25:52.289  INFO 6964 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:25:52.289 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:25:52.289 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:25:52.293 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:25:52.293  INFO 6964 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:25:53.618  INFO 6964 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/tags/-1', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.TagShowController.show', args参数：[-1, {}, 1]}
2020-11-08 09:25:53.650 DEBUG 6964 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.getIndexTag_COUNT    : ==>  Preparing: SELECT count(0) FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id
2020-11-08 09:25:53.654 DEBUG 6964 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.getIndexTag_COUNT    : ==> Parameters: 
2020-11-08 09:25:53.658 DEBUG 6964 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.getIndexTag_COUNT    : <==      Total: 1
2020-11-08 09:25:53.658 DEBUG 6964 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.getIndexTag          : ==>  Preparing: SELECT t.id tid,t.name, b.id bid FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id LIMIT ?
2020-11-08 09:25:53.662 DEBUG 6964 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.getIndexTag          : ==> Parameters: 100(Integer)
2020-11-08 09:25:53.670 DEBUG 6964 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.getIndexTag          : <==      Total: 7
2020-11-08 09:25:53.682 DEBUG 6964 --- [http-nio-8080-exec-5] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type ty, t_user u, t_blog_tags bt, t_tag ta WHERE b.published AND b.user_id = u.id AND b.type_id = ty.id AND b.id = bt.blogs_id AND bt.tags_id = ta.id AND ta.id = ?
2020-11-08 09:25:53.682 DEBUG 6964 --- [http-nio-8080-exec-5] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : ==> Parameters: 54(Long)
2020-11-08 09:25:53.686 DEBUG 6964 --- [http-nio-8080-exec-5] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : <==      Total: 1
2020-11-08 09:25:53.686 DEBUG 6964 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.findAllByTagId      : ==>  Preparing: SELECT b.id, b.title, b.first_picture, b.views, b.update_time, b.description, ty.name, u.nickname, u.avatar FROM t_blog b, t_type ty, t_user u, t_blog_tags bt, t_tag ta WHERE b.published and b.user_id = u.id and b.type_id = ty.id and b.id = bt.blogs_id and bt.tags_id = ta.id and ta.id = ? ORDER BY b.update_time desc LIMIT ?
2020-11-08 09:25:53.690 DEBUG 6964 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.findAllByTagId      : ==> Parameters: 54(Long), 5(Integer)
2020-11-08 09:25:53.698 DEBUG 6964 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.findAllByTagId      : <==      Total: 1
2020-11-08 09:25:53.698  INFO 6964 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: tag
2020-11-08 09:25:54.126  INFO 6964 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:25:54.126 DEBUG 6964 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:25:54.126 DEBUG 6964 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:25:54.126 DEBUG 6964 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:25:54.126  INFO 6964 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:25:58.989  INFO 6964 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/tags/46', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.TagShowController.show', args参数：[46, {}, 1]}
2020-11-08 09:25:58.997 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.TagMapper.getIndexTag_COUNT    : ==>  Preparing: SELECT count(0) FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id
2020-11-08 09:25:58.997 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.TagMapper.getIndexTag_COUNT    : ==> Parameters: 
2020-11-08 09:25:58.997 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.TagMapper.getIndexTag_COUNT    : <==      Total: 1
2020-11-08 09:25:59.001 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.TagMapper.getIndexTag          : ==>  Preparing: SELECT t.id tid,t.name, b.id bid FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id LIMIT ?
2020-11-08 09:25:59.001 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.TagMapper.getIndexTag          : ==> Parameters: 100(Integer)
2020-11-08 09:25:59.009 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.TagMapper.getIndexTag          : <==      Total: 7
2020-11-08 09:25:59.021 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type ty, t_user u, t_blog_tags bt, t_tag ta WHERE b.published AND b.user_id = u.id AND b.type_id = ty.id AND b.id = bt.blogs_id AND bt.tags_id = ta.id AND ta.id = ?
2020-11-08 09:25:59.021 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : ==> Parameters: 46(Long)
2020-11-08 09:25:59.033 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : <==      Total: 1
2020-11-08 09:25:59.033 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.findAllByTagId      : ==>  Preparing: SELECT b.id, b.title, b.first_picture, b.views, b.update_time, b.description, ty.name, u.nickname, u.avatar FROM t_blog b, t_type ty, t_user u, t_blog_tags bt, t_tag ta WHERE b.published and b.user_id = u.id and b.type_id = ty.id and b.id = bt.blogs_id and bt.tags_id = ta.id and ta.id = ? ORDER BY b.update_time desc LIMIT ?
2020-11-08 09:25:59.033 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.findAllByTagId      : ==> Parameters: 46(Long), 5(Integer)
2020-11-08 09:25:59.045 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.findAllByTagId      : <==      Total: 2
2020-11-08 09:25:59.045  INFO 6964 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: tag
2020-11-08 09:25:59.445  INFO 6964 --- [http-nio-8080-exec-9] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:25:59.445 DEBUG 6964 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:25:59.445 DEBUG 6964 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:25:59.449 DEBUG 6964 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:25:59.449  INFO 6964 --- [http-nio-8080-exec-9] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:26:06.183  INFO 6964 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/types/-1', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.TypeShowController.show', args参数：[-1, {}, 1]}
2020-11-08 09:26:06.191 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.getIndexType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_type t INNER JOIN t_blog b ON t.id = b.type_id
2020-11-08 09:26:06.191 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.getIndexType_COUNT  : ==> Parameters: 
2020-11-08 09:26:06.195 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.getIndexType_COUNT  : <==      Total: 1
2020-11-08 09:26:06.195 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.getIndexType        : ==>  Preparing: select b.id bid, b.title, b.type_id, t.id tid, t.name from t_type t inner join t_blog b on t.id = b.type_id LIMIT ?
2020-11-08 09:26:06.199 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.getIndexType        : ==> Parameters: 100(Integer)
2020-11-08 09:26:06.207 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.getIndexType        : <==      Total: 4
2020-11-08 09:26:06.223 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.d.B.findAllByTypeId_COUNT          : ==>  Preparing: SELECT count(0) FROM (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published AND b.type_id = ?
2020-11-08 09:26:06.227 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.d.B.findAllByTypeId_COUNT          : ==> Parameters: 81(Long)
2020-11-08 09:26:06.231 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.d.B.findAllByTypeId_COUNT          : <==      Total: 1
2020-11-08 09:26:06.235 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findAllByTypeId     : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published and b.type_id = ? order by b.update_time desc LIMIT ?
2020-11-08 09:26:06.235 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findAllByTypeId     : ==> Parameters: 81(Long), 5(Integer)
2020-11-08 09:26:06.243 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findAllByTypeId     : <==      Total: 1
2020-11-08 09:26:06.243  INFO 6964 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: type
2020-11-08 09:26:06.664  INFO 6964 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:26:06.664 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:26:06.664 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:26:06.668 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:26:06.668  INFO 6964 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:30:14.562  INFO 6964 --- [http-nio-8080-exec-8] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/tags/-1', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.TagShowController.show', args参数：[-1, {}, 1]}
2020-11-08 09:30:14.582 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.dao.TagMapper.getIndexTag_COUNT    : ==>  Preparing: SELECT count(0) FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id
2020-11-08 09:30:14.582 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.dao.TagMapper.getIndexTag_COUNT    : ==> Parameters: 
2020-11-08 09:30:14.590 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.dao.TagMapper.getIndexTag_COUNT    : <==      Total: 1
2020-11-08 09:30:14.594 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.dao.TagMapper.getIndexTag          : ==>  Preparing: SELECT t.id tid,t.name, b.id bid FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id LIMIT ?
2020-11-08 09:30:14.594 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.dao.TagMapper.getIndexTag          : ==> Parameters: 100(Integer)
2020-11-08 09:30:14.610 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.dao.TagMapper.getIndexTag          : <==      Total: 7
2020-11-08 09:30:14.626 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type ty, t_user u, t_blog_tags bt, t_tag ta WHERE b.published AND b.user_id = u.id AND b.type_id = ty.id AND b.id = bt.blogs_id AND bt.tags_id = ta.id AND ta.id = ?
2020-11-08 09:30:14.626 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : ==> Parameters: 54(Long)
2020-11-08 09:30:14.630 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : <==      Total: 1
2020-11-08 09:30:14.634 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.findAllByTagId      : ==>  Preparing: SELECT b.id, b.title, b.first_picture, b.views, b.update_time, b.description, ty.name, u.nickname, u.avatar FROM t_blog b, t_type ty, t_user u, t_blog_tags bt, t_tag ta WHERE b.published and b.user_id = u.id and b.type_id = ty.id and b.id = bt.blogs_id and bt.tags_id = ta.id and ta.id = ? ORDER BY b.update_time desc LIMIT ?
2020-11-08 09:30:14.634 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.findAllByTagId      : ==> Parameters: 54(Long), 5(Integer)
2020-11-08 09:30:14.638 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.findAllByTagId      : <==      Total: 1
2020-11-08 09:30:14.638  INFO 6964 --- [http-nio-8080-exec-8] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: tag
2020-11-08 09:30:15.202  INFO 6964 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:30:15.202 DEBUG 6964 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:30:15.202 DEBUG 6964 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:30:15.206 DEBUG 6964 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:30:15.206  INFO 6964 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:30:15.964  INFO 6964 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/archives', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.ArchiveShowController.archives', args参数：[{}]}
2020-11-08 09:30:15.984 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.findGroupYear       : ==>  Preparing: select DATE_FORMAT(b.create_time, '%Y') from t_blog b where b.published order by b.create_time desc
2020-11-08 09:30:15.984 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.findGroupYear       : ==> Parameters: 
2020-11-08 09:30:15.996 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.findGroupYear       : <==      Total: 4
2020-11-08 09:30:16.008 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.findByYear          : ==>  Preparing: select b.title, b.create_time, b.id, b.flag from t_blog b where b.published and DATE_FORMAT(b.create_time, "%Y") = ?
2020-11-08 09:30:16.008 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.findByYear          : ==> Parameters: 2020(String)
2020-11-08 09:30:16.016 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.findByYear          : <==      Total: 4
2020-11-08 09:30:16.020 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.findAll             : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published order by b.update_time desc
2020-11-08 09:30:16.020 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.findAll             : ==> Parameters: 
2020-11-08 09:30:16.032 DEBUG 6964 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.findAll             : <==      Total: 4
2020-11-08 09:30:16.032  INFO 6964 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: archives
2020-11-08 09:30:16.426  INFO 6964 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:30:16.426 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:30:16.426 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:30:16.426 DEBUG 6964 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:30:16.426  INFO 6964 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:31:51.530  INFO 6964 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/archives', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.ArchiveShowController.archives', args参数：[{}]}
2020-11-08 09:31:51.535 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findGroupYear       : ==>  Preparing: select DATE_FORMAT(b.create_time, '%Y') from t_blog b where b.published order by b.create_time desc
2020-11-08 09:31:51.537 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findGroupYear       : ==> Parameters: 
2020-11-08 09:31:51.542 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findGroupYear       : <==      Total: 4
2020-11-08 09:31:51.546 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findByYear          : ==>  Preparing: select b.title, b.create_time, b.id, b.flag from t_blog b where b.published and DATE_FORMAT(b.create_time, "%Y") = ?
2020-11-08 09:31:51.548 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findByYear          : ==> Parameters: 2020(String)
2020-11-08 09:31:51.559 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findByYear          : <==      Total: 4
2020-11-08 09:31:51.563 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findAll             : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published order by b.update_time desc
2020-11-08 09:31:51.570 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findAll             : ==> Parameters: 
2020-11-08 09:31:51.590 DEBUG 6964 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findAll             : <==      Total: 4
2020-11-08 09:31:51.592  INFO 6964 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: archives
2020-11-08 09:31:52.218  INFO 6964 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:31:52.219 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:31:52.219 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:31:52.220 DEBUG 6964 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:31:52.221  INFO 6964 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:31:55.287  INFO 6964 --- [http-nio-8080-exec-8] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/archives', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.ArchiveShowController.archives', args参数：[{}]}
2020-11-08 09:31:55.292 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.findGroupYear       : ==>  Preparing: select DATE_FORMAT(b.create_time, '%Y') from t_blog b where b.published order by b.create_time desc
2020-11-08 09:31:55.293 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.findGroupYear       : ==> Parameters: 
2020-11-08 09:31:55.299 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.findGroupYear       : <==      Total: 4
2020-11-08 09:31:55.303 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.findByYear          : ==>  Preparing: select b.title, b.create_time, b.id, b.flag from t_blog b where b.published and DATE_FORMAT(b.create_time, "%Y") = ?
2020-11-08 09:31:55.304 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.findByYear          : ==> Parameters: 2020(String)
2020-11-08 09:31:55.321 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.findByYear          : <==      Total: 4
2020-11-08 09:31:55.324 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.findAll             : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published order by b.update_time desc
2020-11-08 09:31:55.326 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.findAll             : ==> Parameters: 
2020-11-08 09:31:55.358 DEBUG 6964 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.findAll             : <==      Total: 4
2020-11-08 09:31:55.359  INFO 6964 --- [http-nio-8080-exec-8] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: archives
2020-11-08 09:31:55.835  INFO 6964 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:31:55.835 DEBUG 6964 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:31:55.835 DEBUG 6964 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:31:55.836 DEBUG 6964 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:31:55.836  INFO 6964 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:32:07.043  INFO 6964 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.index', args参数：[1, {}]}
2020-11-08 09:32:07.055 DEBUG 6964 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll_COUNT       : ==>  Preparing: SELECT count(0) FROM (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published
2020-11-08 09:32:07.056 DEBUG 6964 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll_COUNT       : ==> Parameters: 
2020-11-08 09:32:07.060 DEBUG 6964 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll_COUNT       : <==      Total: 1
2020-11-08 09:32:07.062 DEBUG 6964 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll             : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published order by b.update_time desc LIMIT ?
2020-11-08 09:32:07.064 DEBUG 6964 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll             : ==> Parameters: 5(Integer)
2020-11-08 09:32:07.071 DEBUG 6964 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll             : <==      Total: 4
2020-11-08 09:32:07.074 DEBUG 6964 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.getIndexType        : ==>  Preparing: select b.id bid, b.title, b.type_id, t.id tid, t.name from t_type t inner join t_blog b on t.id = b.type_id
2020-11-08 09:32:07.075 DEBUG 6964 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.getIndexType        : ==> Parameters: 
2020-11-08 09:32:07.082 DEBUG 6964 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.getIndexType        : <==      Total: 4
2020-11-08 09:32:07.087 DEBUG 6964 --- [http-nio-8080-exec-2] c.s.p.dao.TagMapper.getIndexTag          : ==>  Preparing: SELECT t.id tid,t.name, b.id bid FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id
2020-11-08 09:32:07.089 DEBUG 6964 --- [http-nio-8080-exec-2] c.s.p.dao.TagMapper.getIndexTag          : ==> Parameters: 
2020-11-08 09:32:07.096 DEBUG 6964 --- [http-nio-8080-exec-2] c.s.p.dao.TagMapper.getIndexTag          : <==      Total: 7
2020-11-08 09:32:07.100 DEBUG 6964 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findRecommendBlogs  : ==>  Preparing: select b.id, b.title, b.update_time from t_blog b where b.published and b.commentabled order by update_time desc limit 5
2020-11-08 09:32:07.101 DEBUG 6964 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findRecommendBlogs  : ==> Parameters: 
2020-11-08 09:32:07.110 DEBUG 6964 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findRecommendBlogs  : <==      Total: 4
2020-11-08 09:32:07.111  INFO 6964 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: index
2020-11-08 09:32:07.921  INFO 6964 --- [http-nio-8080-exec-9] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:32:07.922 DEBUG 6964 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:32:07.922 DEBUG 6964 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:32:07.923 DEBUG 6964 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:32:07.925  INFO 6964 --- [http-nio-8080-exec-9] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:32:10.511  INFO 6964 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/archives', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.ArchiveShowController.archives', args参数：[{}]}
2020-11-08 09:32:10.516 DEBUG 6964 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findGroupYear       : ==>  Preparing: select DATE_FORMAT(b.create_time, '%Y') from t_blog b where b.published order by b.create_time desc
2020-11-08 09:32:10.518 DEBUG 6964 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findGroupYear       : ==> Parameters: 
2020-11-08 09:32:10.522 DEBUG 6964 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findGroupYear       : <==      Total: 4
2020-11-08 09:32:10.525 DEBUG 6964 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findByYear          : ==>  Preparing: select b.title, b.create_time, b.id, b.flag from t_blog b where b.published and DATE_FORMAT(b.create_time, "%Y") = ?
2020-11-08 09:32:10.527 DEBUG 6964 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findByYear          : ==> Parameters: 2020(String)
2020-11-08 09:32:10.543 DEBUG 6964 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findByYear          : <==      Total: 4
2020-11-08 09:32:10.555 DEBUG 6964 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findAll             : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published order by b.update_time desc
2020-11-08 09:32:10.556 DEBUG 6964 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findAll             : ==> Parameters: 
2020-11-08 09:32:10.566 DEBUG 6964 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findAll             : <==      Total: 4
2020-11-08 09:32:10.570  INFO 6964 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: archives
2020-11-08 09:32:10.962  INFO 6964 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:32:10.987 DEBUG 6964 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:32:10.988 DEBUG 6964 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:32:10.989 DEBUG 6964 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:32:10.989  INFO 6964 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:34:52.456  INFO 7192 --- [main] c.s.p.PersonalBlogApplication            : Starting PersonalBlogApplication on m with PID 7192 (D:\myblog-mybatis\target\classes started by 　　　 in D:\myblog-mybatis)
2020-11-08 09:34:52.461 DEBUG 7192 --- [main] c.s.p.PersonalBlogApplication            : Running with Spring Boot v2.3.4.RELEASE, Spring v5.2.9.RELEASE
2020-11-08 09:34:52.462  INFO 7192 --- [main] c.s.p.PersonalBlogApplication            : No active profile set, falling back to default profiles: default
2020-11-08 09:34:54.097  INFO 7192 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-11-08 09:34:54.108  INFO 7192 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-11-08 09:34:54.109  INFO 7192 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.38]
2020-11-08 09:34:54.230  INFO 7192 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-11-08 09:34:54.230  INFO 7192 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1659 ms
2020-11-08 09:34:54.984  INFO 7192 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-11-08 09:34:55.161  INFO 7192 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-11-08 09:34:55.428  INFO 7192 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-11-08 09:34:55.438  INFO 7192 --- [main] c.s.p.PersonalBlogApplication            : Started PersonalBlogApplication in 3.763 seconds (JVM running for 4.809)
2020-11-08 09:35:24.751  INFO 7192 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-11-08 09:35:24.754  INFO 7192 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-11-08 09:35:24.771  INFO 7192 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 16 ms
2020-11-08 09:35:24.874  INFO 7192 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/archives', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.ArchiveShowController.archives', args参数：[{}]}
2020-11-08 09:35:24.930  INFO 7192 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-11-08 09:35:25.186  INFO 7192 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-11-08 09:35:25.195 DEBUG 7192 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findGroupYear       : ==>  Preparing: select DATE_FORMAT(b.create_time, '%Y') from t_blog b where b.published order by b.create_time
2020-11-08 09:35:25.241 DEBUG 7192 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findGroupYear       : ==> Parameters: 
2020-11-08 09:35:25.271 DEBUG 7192 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findGroupYear       : <==      Total: 4
2020-11-08 09:35:25.278 DEBUG 7192 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findByYear          : ==>  Preparing: select b.title, b.create_time, b.id, b.flag from t_blog b where b.published and DATE_FORMAT(b.create_time, "%Y") = ?
2020-11-08 09:35:25.279 DEBUG 7192 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findByYear          : ==> Parameters: 2020(String)
2020-11-08 09:35:25.283 DEBUG 7192 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findByYear          : <==      Total: 4
2020-11-08 09:35:25.285 DEBUG 7192 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findAll             : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published order by b.update_time desc
2020-11-08 09:35:25.285 DEBUG 7192 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findAll             : ==> Parameters: 
2020-11-08 09:35:25.292 DEBUG 7192 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findAll             : <==      Total: 4
2020-11-08 09:35:25.292  INFO 7192 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: archives
2020-11-08 09:35:25.973  INFO 7192 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:35:25.978 DEBUG 7192 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:35:25.979 DEBUG 7192 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:35:25.981 DEBUG 7192 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:35:25.982  INFO 7192 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:39:17.044  INFO 7192 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/archives', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.ArchiveShowController.archives', args参数：[{}]}
2020-11-08 09:39:17.048 DEBUG 7192 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.findGroupYear       : ==>  Preparing: select DATE_FORMAT(b.create_time, '%Y') from t_blog b where b.published order by b.create_time
2020-11-08 09:39:17.053 DEBUG 7192 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.findGroupYear       : ==> Parameters: 
2020-11-08 09:39:17.062 DEBUG 7192 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.findGroupYear       : <==      Total: 4
2020-11-08 09:39:17.071 DEBUG 7192 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.findByYear          : ==>  Preparing: select b.title, b.create_time, b.id, b.flag from t_blog b where b.published and DATE_FORMAT(b.create_time, "%Y") = ?
2020-11-08 09:39:17.077 DEBUG 7192 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.findByYear          : ==> Parameters: 2020(String)
2020-11-08 09:39:17.088 DEBUG 7192 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.findByYear          : <==      Total: 4
2020-11-08 09:39:17.092 DEBUG 7192 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.findAll             : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published order by b.update_time desc
2020-11-08 09:39:17.094 DEBUG 7192 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.findAll             : ==> Parameters: 
2020-11-08 09:39:17.107 DEBUG 7192 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.findAll             : <==      Total: 4
2020-11-08 09:39:17.108  INFO 7192 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: archives
2020-11-08 09:39:17.524  INFO 7192 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:39:17.524 DEBUG 7192 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:39:17.525 DEBUG 7192 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:39:17.526 DEBUG 7192 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:39:17.527  INFO 7192 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:39:22.185  INFO 7192 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.index', args参数：[1, {}]}
2020-11-08 09:39:22.297 DEBUG 7192 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findAll_COUNT       : ==>  Preparing: SELECT count(0) FROM (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published
2020-11-08 09:39:22.297 DEBUG 7192 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findAll_COUNT       : ==> Parameters: 
2020-11-08 09:39:22.298 DEBUG 7192 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findAll_COUNT       : <==      Total: 1
2020-11-08 09:39:22.301 DEBUG 7192 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findAll             : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published order by b.update_time desc LIMIT ?
2020-11-08 09:39:22.302 DEBUG 7192 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findAll             : ==> Parameters: 5(Integer)
2020-11-08 09:39:22.306 DEBUG 7192 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findAll             : <==      Total: 4
2020-11-08 09:39:22.308 DEBUG 7192 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.getIndexType        : ==>  Preparing: select b.id bid, b.title, b.type_id, t.id tid, t.name from t_type t inner join t_blog b on t.id = b.type_id
2020-11-08 09:39:22.309 DEBUG 7192 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.getIndexType        : ==> Parameters: 
2020-11-08 09:39:22.312 DEBUG 7192 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.getIndexType        : <==      Total: 4
2020-11-08 09:39:22.316 DEBUG 7192 --- [http-nio-8080-exec-7] c.s.p.dao.TagMapper.getIndexTag          : ==>  Preparing: SELECT t.id tid,t.name, b.id bid FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id
2020-11-08 09:39:22.316 DEBUG 7192 --- [http-nio-8080-exec-7] c.s.p.dao.TagMapper.getIndexTag          : ==> Parameters: 
2020-11-08 09:39:22.319 DEBUG 7192 --- [http-nio-8080-exec-7] c.s.p.dao.TagMapper.getIndexTag          : <==      Total: 7
2020-11-08 09:39:22.321 DEBUG 7192 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findRecommendBlogs  : ==>  Preparing: select b.id, b.title, b.update_time from t_blog b where b.published and b.commentabled order by update_time desc limit 5
2020-11-08 09:39:22.321 DEBUG 7192 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findRecommendBlogs  : ==> Parameters: 
2020-11-08 09:39:22.323 DEBUG 7192 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findRecommendBlogs  : <==      Total: 4
2020-11-08 09:39:22.324  INFO 7192 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: index
2020-11-08 09:39:23.084  INFO 7192 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:39:23.085 DEBUG 7192 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:39:23.086 DEBUG 7192 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:39:23.087 DEBUG 7192 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:39:23.087  INFO 7192 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:39:24.311  INFO 7192 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/archives', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.ArchiveShowController.archives', args参数：[{}]}
2020-11-08 09:39:24.318 DEBUG 7192 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findGroupYear       : ==>  Preparing: select DATE_FORMAT(b.create_time, '%Y') from t_blog b where b.published order by b.create_time
2020-11-08 09:39:24.321 DEBUG 7192 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findGroupYear       : ==> Parameters: 
2020-11-08 09:39:24.327 DEBUG 7192 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findGroupYear       : <==      Total: 4
2020-11-08 09:39:24.331 DEBUG 7192 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findByYear          : ==>  Preparing: select b.title, b.create_time, b.id, b.flag from t_blog b where b.published and DATE_FORMAT(b.create_time, "%Y") = ?
2020-11-08 09:39:24.335 DEBUG 7192 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findByYear          : ==> Parameters: 2020(String)
2020-11-08 09:39:24.359 DEBUG 7192 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findByYear          : <==      Total: 4
2020-11-08 09:39:24.365 DEBUG 7192 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findAll             : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published order by b.update_time desc
2020-11-08 09:39:24.366 DEBUG 7192 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findAll             : ==> Parameters: 
2020-11-08 09:39:24.378 DEBUG 7192 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findAll             : <==      Total: 4
2020-11-08 09:39:24.380  INFO 7192 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: archives
2020-11-08 09:39:24.779  INFO 7192 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:39:24.780 DEBUG 7192 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:39:24.782 DEBUG 7192 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:39:24.787 DEBUG 7192 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:39:24.787  INFO 7192 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:40:17.851  INFO 2820 --- [main] c.s.p.PersonalBlogApplication            : Starting PersonalBlogApplication on m with PID 2820 (D:\myblog-mybatis\target\classes started by 　　　 in D:\myblog-mybatis)
2020-11-08 09:40:17.855 DEBUG 2820 --- [main] c.s.p.PersonalBlogApplication            : Running with Spring Boot v2.3.4.RELEASE, Spring v5.2.9.RELEASE
2020-11-08 09:40:17.855  INFO 2820 --- [main] c.s.p.PersonalBlogApplication            : No active profile set, falling back to default profiles: default
2020-11-08 09:40:19.948  INFO 2820 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-11-08 09:40:19.956  INFO 2820 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-11-08 09:40:19.957  INFO 2820 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.38]
2020-11-08 09:40:20.061  INFO 2820 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-11-08 09:40:20.061  INFO 2820 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2130 ms
2020-11-08 09:40:20.836  INFO 2820 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-11-08 09:40:21.042  INFO 2820 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-11-08 09:40:21.341  INFO 2820 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-11-08 09:40:21.351  INFO 2820 --- [main] c.s.p.PersonalBlogApplication            : Started PersonalBlogApplication in 4.197 seconds (JVM running for 5.132)
2020-11-08 09:40:25.167  INFO 2820 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-11-08 09:40:25.168  INFO 2820 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-11-08 09:40:25.191  INFO 2820 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 22 ms
2020-11-08 09:40:25.258  INFO 2820 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/archives', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.ArchiveShowController.archives', args参数：[{}]}
2020-11-08 09:40:25.314  INFO 2820 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-11-08 09:40:25.743  INFO 2820 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-11-08 09:40:25.754 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findGroupYear       : ==>  Preparing: select DATE_FORMAT(b.create_time, '%Y') from t_blog b where b.published order by b.create_time
2020-11-08 09:40:25.813 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findGroupYear       : ==> Parameters: 
2020-11-08 09:40:25.842 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findGroupYear       : <==      Total: 4
2020-11-08 09:40:25.859 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findByYear          : ==>  Preparing: select b.title, b.create_time, b.id, b.flag from t_blog b where b.published and DATE_FORMAT(b.create_time, "%Y") = ? order by b.create_time
2020-11-08 09:40:25.860 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findByYear          : ==> Parameters: 2020(String)
2020-11-08 09:40:25.866 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findByYear          : <==      Total: 4
2020-11-08 09:40:25.868 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findAll             : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published order by b.update_time desc
2020-11-08 09:40:25.868 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findAll             : ==> Parameters: 
2020-11-08 09:40:25.875 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findAll             : <==      Total: 4
2020-11-08 09:40:25.876  INFO 2820 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: archives
2020-11-08 09:40:26.812  INFO 2820 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:40:26.822 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:40:26.822 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:40:26.824 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:40:26.825  INFO 2820 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:41:45.656  INFO 2820 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/tags/-1', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.TagShowController.show', args参数：[-1, {}, 1]}
2020-11-08 09:41:45.784 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.getIndexTag_COUNT    : ==>  Preparing: SELECT count(0) FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id
2020-11-08 09:41:45.785 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.getIndexTag_COUNT    : ==> Parameters: 
2020-11-08 09:41:45.788 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.getIndexTag_COUNT    : <==      Total: 1
2020-11-08 09:41:45.791 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.getIndexTag          : ==>  Preparing: SELECT t.id tid,t.name, b.id bid FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id LIMIT ?
2020-11-08 09:41:45.791 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.getIndexTag          : ==> Parameters: 100(Integer)
2020-11-08 09:41:45.796 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.getIndexTag          : <==      Total: 7
2020-11-08 09:41:45.806 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type ty, t_user u, t_blog_tags bt, t_tag ta WHERE b.published AND b.user_id = u.id AND b.type_id = ty.id AND b.id = bt.blogs_id AND bt.tags_id = ta.id AND ta.id = ?
2020-11-08 09:41:45.807 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : ==> Parameters: 54(Long)
2020-11-08 09:41:45.808 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : <==      Total: 1
2020-11-08 09:41:45.809 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.findAllByTagId      : ==>  Preparing: SELECT b.id, b.title, b.first_picture, b.views, b.update_time, b.description, ty.name, u.nickname, u.avatar FROM t_blog b, t_type ty, t_user u, t_blog_tags bt, t_tag ta WHERE b.published and b.user_id = u.id and b.type_id = ty.id and b.id = bt.blogs_id and bt.tags_id = ta.id and ta.id = ? ORDER BY b.update_time desc LIMIT ?
2020-11-08 09:41:45.811 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.findAllByTagId      : ==> Parameters: 54(Long), 5(Integer)
2020-11-08 09:41:45.813 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.findAllByTagId      : <==      Total: 1
2020-11-08 09:41:45.816  INFO 2820 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: tag
2020-11-08 09:41:46.271  INFO 2820 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:41:46.272 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:41:46.272 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:41:46.274 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:41:46.274  INFO 2820 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:41:52.182  INFO 2820 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/types/-1', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.TypeShowController.show', args参数：[-1, {}, 1]}
2020-11-08 09:41:52.209 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.getIndexType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_type t INNER JOIN t_blog b ON t.id = b.type_id
2020-11-08 09:41:52.213 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.getIndexType_COUNT  : ==> Parameters: 
2020-11-08 09:41:52.218 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.getIndexType_COUNT  : <==      Total: 1
2020-11-08 09:41:52.220 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.getIndexType        : ==>  Preparing: select b.id bid, b.title, b.type_id, t.id tid, t.name from t_type t inner join t_blog b on t.id = b.type_id LIMIT ?
2020-11-08 09:41:52.222 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.getIndexType        : ==> Parameters: 100(Integer)
2020-11-08 09:41:52.229 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.getIndexType        : <==      Total: 4
2020-11-08 09:41:52.244 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.d.B.findAllByTypeId_COUNT          : ==>  Preparing: SELECT count(0) FROM (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published AND b.type_id = ?
2020-11-08 09:41:52.246 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.d.B.findAllByTypeId_COUNT          : ==> Parameters: 81(Long)
2020-11-08 09:41:52.250 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.d.B.findAllByTypeId_COUNT          : <==      Total: 1
2020-11-08 09:41:52.251 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findAllByTypeId     : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published and b.type_id = ? order by b.update_time desc LIMIT ?
2020-11-08 09:41:52.253 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findAllByTypeId     : ==> Parameters: 81(Long), 5(Integer)
2020-11-08 09:41:52.257 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findAllByTypeId     : <==      Total: 1
2020-11-08 09:41:52.259  INFO 2820 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: type
2020-11-08 09:41:52.668  INFO 2820 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:41:52.668 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:41:52.669 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:41:52.670 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:41:52.670  INFO 2820 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:41:57.217  INFO 2820 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.index', args参数：[1, {}]}
2020-11-08 09:41:57.245 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.findAll_COUNT       : ==>  Preparing: SELECT count(0) FROM (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published
2020-11-08 09:41:57.246 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.findAll_COUNT       : ==> Parameters: 
2020-11-08 09:41:57.251 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.findAll_COUNT       : <==      Total: 1
2020-11-08 09:41:57.255 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.findAll             : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published order by b.update_time desc LIMIT ?
2020-11-08 09:41:57.259 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.findAll             : ==> Parameters: 5(Integer)
2020-11-08 09:41:57.273 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.findAll             : <==      Total: 4
2020-11-08 09:41:57.280 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.dao.TypeMapper.getIndexType        : ==>  Preparing: select b.id bid, b.title, b.type_id, t.id tid, t.name from t_type t inner join t_blog b on t.id = b.type_id
2020-11-08 09:41:57.281 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.dao.TypeMapper.getIndexType        : ==> Parameters: 
2020-11-08 09:41:57.297 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.dao.TypeMapper.getIndexType        : <==      Total: 4
2020-11-08 09:41:57.305 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.dao.TagMapper.getIndexTag          : ==>  Preparing: SELECT t.id tid,t.name, b.id bid FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id
2020-11-08 09:41:57.307 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.dao.TagMapper.getIndexTag          : ==> Parameters: 
2020-11-08 09:41:57.319 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.dao.TagMapper.getIndexTag          : <==      Total: 7
2020-11-08 09:41:57.321 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.findRecommendBlogs  : ==>  Preparing: select b.id, b.title, b.update_time from t_blog b where b.published and b.commentabled order by update_time desc limit 5
2020-11-08 09:41:57.322 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.findRecommendBlogs  : ==> Parameters: 
2020-11-08 09:41:57.325 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.findRecommendBlogs  : <==      Total: 4
2020-11-08 09:41:57.326  INFO 2820 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: index
2020-11-08 09:41:57.748  INFO 2820 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:41:57.749 DEBUG 2820 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:41:57.749 DEBUG 2820 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:41:57.751 DEBUG 2820 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:41:57.752  INFO 2820 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:42:21.423  INFO 2820 --- [http-nio-8080-exec-9] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/blog/70', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.BlogShowController.showBlog', args参数：[70, {}]}
2020-11-08 09:42:21.457 DEBUG 2820 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.selectBlogById      : ==>  Preparing: select b.id, b.title, b.content, b.views, b.first_picture, b.flag, b.appreciation, b.share_statement, b.commentabled, b.recommend, b.update_time, t.name, t.id tid, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published and b.id = ? order by b.update_time desc
2020-11-08 09:42:21.458 DEBUG 2820 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.selectBlogById      : ==> Parameters: 70(Long)
2020-11-08 09:42:21.463 DEBUG 2820 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.selectBlogById      : <==      Total: 1
2020-11-08 09:42:21.513 DEBUG 2820 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.updateViews         : ==>  Preparing: update t_blog set views = views +1 where id = ?
2020-11-08 09:42:21.513 DEBUG 2820 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.updateViews         : ==> Parameters: 70(Long)
2020-11-08 09:42:21.515 DEBUG 2820 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.updateViews         : <==    Updates: 1
2020-11-08 09:42:21.521 DEBUG 2820 --- [http-nio-8080-exec-9] c.s.p.dao.BlogTagsMapper.selectByBlogId  : ==>  Preparing: select tags_id from t_blog_tags where blogs_id = ?
2020-11-08 09:42:21.521 DEBUG 2820 --- [http-nio-8080-exec-9] c.s.p.dao.BlogTagsMapper.selectByBlogId  : ==> Parameters: 70(Long)
2020-11-08 09:42:21.522 DEBUG 2820 --- [http-nio-8080-exec-9] c.s.p.dao.BlogTagsMapper.selectByBlogId  : <==      Total: 2
2020-11-08 09:42:21.546 DEBUG 2820 --- [http-nio-8080-exec-9] c.s.p.dao.TagMapper.findAllByIds         : ==>  Preparing: select id,name from t_tag WHERE id in ( ? , ? )
2020-11-08 09:42:21.546 DEBUG 2820 --- [http-nio-8080-exec-9] c.s.p.dao.TagMapper.findAllByIds         : ==> Parameters: 46(Long), 55(Long)
2020-11-08 09:42:21.549 DEBUG 2820 --- [http-nio-8080-exec-9] c.s.p.dao.TagMapper.findAllByIds         : <==      Total: 2
2020-11-08 09:42:21.550  INFO 2820 --- [http-nio-8080-exec-9] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: blog
2020-11-08 09:42:21.968  INFO 2820 --- [http-nio-8080-exec-8] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:42:21.968 DEBUG 2820 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:42:21.969 DEBUG 2820 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:42:21.970 DEBUG 2820 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:42:21.970  INFO 2820 --- [http-nio-8080-exec-8] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:42:22.091  INFO 2820 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/comments/70', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.CommentController.getComment', args参数：[70, {}]}
2020-11-08 09:42:22.094 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.d.C.listCommentByBlogId            : ==>  Preparing: select * from t_comment where blog_id = ? and parent_comment_id is null order by create_time DESC
2020-11-08 09:42:22.094 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.d.C.listCommentByBlogId            : ==> Parameters: 70(Long)
2020-11-08 09:42:22.098 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.d.C.listCommentByBlogId            : <==      Total: 0
2020-11-08 09:42:22.099  INFO 2820 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: blog :: commentList
2020-11-08 09:43:18.613  INFO 2820 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/login', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.LoginController.login', args参数：[admin, admin, org.apache.catalina.session.StandardSessionFacade@3d20019c, {}]}
2020-11-08 09:43:18.656 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.d.U.queryByUsernameAndPassword     : ==>  Preparing: select id,nickname,avatar,email from blog.t_user where username = ? and password = ?;
2020-11-08 09:43:18.657 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.d.U.queryByUsernameAndPassword     : ==> Parameters: admin(String), 21232f297a57a5a743894a0e4a801fc3(String)
2020-11-08 09:43:18.660 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.d.U.queryByUsernameAndPassword     : <==      Total: 1
2020-11-08 09:43:18.666  INFO 2820 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/index
2020-11-08 09:43:20.283  INFO 2820 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/blogs', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.BlogController.showBlog', args参数：[{}, 1]}
2020-11-08 09:43:20.314 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id
2020-11-08 09:43:20.316 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : ==> Parameters: 
2020-11-08 09:43:20.323 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : <==      Total: 1
2020-11-08 09:43:20.335 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.getAllBlog          : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.type_id, b.published, b.commentabled, b.share_statement, t.id typeid, t.name typename FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2020-11-08 09:43:20.336 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.getAllBlog          : ==> Parameters: 3(Integer)
2020-11-08 09:43:20.348 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.getAllBlog          : <==      Total: 3
2020-11-08 09:43:20.352 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: select id,name from blog.t_type;
2020-11-08 09:43:20.353 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 
2020-11-08 09:43:20.365 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 15
2020-11-08 09:43:20.367  INFO 2820 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/blogs
2020-11-08 09:43:24.718  INFO 2820 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/blogs/search', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.BlogController.searchBlogs', args参数：[{blogQuery=BlogQuery{title='', typeId=null, recommend=false}, org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, BlogQuery{title='', typeId=null, recommend=false}, 2]}
2020-11-08 09:43:24.740 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.d.B.getAllBlogBySearch_COUNT       : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id
2020-11-08 09:43:24.741 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.d.B.getAllBlogBySearch_COUNT       : ==> Parameters: 
2020-11-08 09:43:24.744 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.d.B.getAllBlogBySearch_COUNT       : <==      Total: 1
2020-11-08 09:43:24.746 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getAllBlogBySearch  : ==>  Preparing: select b.id, b.title, b.update_time, b.recommend, b.type_id, b.published, t.id typeid, t.name typename from t_blog b INNER JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?, ?
2020-11-08 09:43:24.747 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getAllBlogBySearch  : ==> Parameters: 3(Integer), 3(Integer)
2020-11-08 09:43:24.752 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getAllBlogBySearch  : <==      Total: 1
2020-11-08 09:43:24.754 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: select id,name from blog.t_type;
2020-11-08 09:43:24.755 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 
2020-11-08 09:43:24.762 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 15
2020-11-08 09:43:24.763  INFO 2820 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/blogs :: blogList
2020-11-08 09:43:25.814  INFO 2820 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/blogs/search', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.BlogController.searchBlogs', args参数：[{blogQuery=BlogQuery{title='', typeId=null, recommend=false}, org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}, BlogQuery{title='', typeId=null, recommend=false}, 1]}
2020-11-08 09:43:25.822 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.d.B.getAllBlogBySearch_COUNT       : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id
2020-11-08 09:43:25.822 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.d.B.getAllBlogBySearch_COUNT       : ==> Parameters: 
2020-11-08 09:43:25.825 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.d.B.getAllBlogBySearch_COUNT       : <==      Total: 1
2020-11-08 09:43:25.827 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.getAllBlogBySearch  : ==>  Preparing: select b.id, b.title, b.update_time, b.recommend, b.type_id, b.published, t.id typeid, t.name typename from t_blog b INNER JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2020-11-08 09:43:25.827 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.getAllBlogBySearch  : ==> Parameters: 3(Integer)
2020-11-08 09:43:25.833 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.getAllBlogBySearch  : <==      Total: 3
2020-11-08 09:43:25.835 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: select id,name from blog.t_type;
2020-11-08 09:43:25.837 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 
2020-11-08 09:43:25.842 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 15
2020-11-08 09:43:25.843  INFO 2820 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/blogs :: blogList
2020-11-08 09:43:28.105  INFO 2820 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/blogs/input', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.BlogController.toAddBlog', args参数：[{}]}
2020-11-08 09:43:28.108 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: select id,name from blog.t_type;
2020-11-08 09:43:28.109 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 
2020-11-08 09:43:28.114 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 15
2020-11-08 09:43:28.118 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.selectAllTags        : ==>  Preparing: select id,name from blog.t_tag
2020-11-08 09:43:28.120 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.selectAllTags        : ==> Parameters: 
2020-11-08 09:43:28.128 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.selectAllTags        : <==      Total: 13
2020-11-08 09:43:28.131  INFO 2820 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/blog-input
2020-11-08 09:45:57.571  INFO 2820 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/types', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TypeController.getTypes', args参数：[{}, 1]}
2020-11-08 09:45:57.593 DEBUG 2820 --- [http-nio-8080-exec-3] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_type
2020-11-08 09:45:57.594 DEBUG 2820 --- [http-nio-8080-exec-3] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==> Parameters: 
2020-11-08 09:45:57.598 DEBUG 2820 --- [http-nio-8080-exec-3] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : <==      Total: 1
2020-11-08 09:45:57.602 DEBUG 2820 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: SELECT id, name FROM blog.t_type order by id desc LIMIT ?
2020-11-08 09:45:57.603 DEBUG 2820 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 5(Integer)
2020-11-08 09:45:57.612 DEBUG 2820 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 5
2020-11-08 09:45:57.613  INFO 2820 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/types
2020-11-08 09:46:00.934  INFO 2820 --- [http-nio-8080-exec-9] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/types', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TypeController.getTypes', args参数：[{}, 2]}
2020-11-08 09:46:00.935 DEBUG 2820 --- [http-nio-8080-exec-9] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_type
2020-11-08 09:46:00.935 DEBUG 2820 --- [http-nio-8080-exec-9] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==> Parameters: 
2020-11-08 09:46:00.937 DEBUG 2820 --- [http-nio-8080-exec-9] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : <==      Total: 1
2020-11-08 09:46:00.938 DEBUG 2820 --- [http-nio-8080-exec-9] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: SELECT id, name FROM blog.t_type order by id desc LIMIT ?, ?
2020-11-08 09:46:00.938 DEBUG 2820 --- [http-nio-8080-exec-9] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 5(Integer), 5(Integer)
2020-11-08 09:46:00.940 DEBUG 2820 --- [http-nio-8080-exec-9] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 5
2020-11-08 09:46:00.940  INFO 2820 --- [http-nio-8080-exec-9] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/types
2020-11-08 09:46:04.576  INFO 2820 --- [http-nio-8080-exec-8] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/types/79/delete', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TypeController.deleteType', args参数：[79, {}]}
2020-11-08 09:46:04.582 DEBUG 2820 --- [http-nio-8080-exec-8] c.s.p.dao.TypeMapper.deleteTypeById      : ==>  Preparing: delete from blog.t_type where id = ?;
2020-11-08 09:46:04.584 DEBUG 2820 --- [http-nio-8080-exec-8] c.s.p.dao.TypeMapper.deleteTypeById      : ==> Parameters: 79(Long)
2020-11-08 09:46:04.592 DEBUG 2820 --- [http-nio-8080-exec-8] c.s.p.dao.TypeMapper.deleteTypeById      : <==    Updates: 1
2020-11-08 09:46:04.593  INFO 2820 --- [http-nio-8080-exec-8] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: redirect:/admin/types
2020-11-08 09:46:04.669  INFO 2820 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/types', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TypeController.getTypes', args参数：[{success=删除成功}, 1]}
2020-11-08 09:46:04.671 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_type
2020-11-08 09:46:04.672 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==> Parameters: 
2020-11-08 09:46:04.673 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : <==      Total: 1
2020-11-08 09:46:04.674 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: SELECT id, name FROM blog.t_type order by id desc LIMIT ?
2020-11-08 09:46:04.674 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 5(Integer)
2020-11-08 09:46:04.676 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 5
2020-11-08 09:46:04.676  INFO 2820 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/types
2020-11-08 09:46:07.582  INFO 2820 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/tags', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TagController.showTags', args参数：[1, {}]}
2020-11-08 09:46:07.590 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.selectAllTags_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_tag
2020-11-08 09:46:07.590 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.selectAllTags_COUNT  : ==> Parameters: 
2020-11-08 09:46:07.592 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.selectAllTags_COUNT  : <==      Total: 1
2020-11-08 09:46:07.596 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.selectAllTags        : ==>  Preparing: SELECT id, name FROM blog.t_tag order by id desc LIMIT ?
2020-11-08 09:46:07.597 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.selectAllTags        : ==> Parameters: 5(Integer)
2020-11-08 09:46:07.599 DEBUG 2820 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.selectAllTags        : <==      Total: 5
2020-11-08 09:46:07.601  INFO 2820 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: /admin/tags
2020-11-08 09:46:09.448  INFO 2820 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/tags/input', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TagController.toAddTags', args参数：[{}]}
2020-11-08 09:46:09.449  INFO 2820 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/tag-input
2020-11-08 09:46:13.512  INFO 2820 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/tags', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TagController.addTag', args参数：[Tag(id=null, name=设计模式, blogs=[]), {}]}
2020-11-08 09:46:13.517 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.TagMapper.selectByName         : ==>  Preparing: select id,name from blog.t_tag where name = ?
2020-11-08 09:46:13.520 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.TagMapper.selectByName         : ==> Parameters: 设计模式(String)
2020-11-08 09:46:13.525 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.TagMapper.selectByName         : <==      Total: 0
2020-11-08 09:46:13.530 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.TagMapper.insertTag            : ==>  Preparing: insert into blog.t_tag values (?,?);
2020-11-08 09:46:13.544 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.TagMapper.insertTag            : ==> Parameters: null, 设计模式(String)
2020-11-08 09:46:13.549 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.TagMapper.insertTag            : <==    Updates: 1
2020-11-08 09:46:13.550  INFO 2820 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: redirect:/admin/tags
2020-11-08 09:46:13.564  INFO 2820 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/tags', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TagController.showTags', args参数：[1, {message=新增成功}]}
2020-11-08 09:46:13.565 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.selectAllTags_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_tag
2020-11-08 09:46:13.567 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.selectAllTags_COUNT  : ==> Parameters: 
2020-11-08 09:46:13.569 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.selectAllTags_COUNT  : <==      Total: 1
2020-11-08 09:46:13.570 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.selectAllTags        : ==>  Preparing: SELECT id, name FROM blog.t_tag order by id desc LIMIT ?
2020-11-08 09:46:13.570 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.selectAllTags        : ==> Parameters: 5(Integer)
2020-11-08 09:46:13.572 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.selectAllTags        : <==      Total: 5
2020-11-08 09:46:13.573  INFO 2820 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: /admin/tags
2020-11-08 09:46:14.725  INFO 2820 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/types', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TypeController.getTypes', args参数：[{}, 1]}
2020-11-08 09:46:14.729 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_type
2020-11-08 09:46:14.731 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==> Parameters: 
2020-11-08 09:46:14.733 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : <==      Total: 1
2020-11-08 09:46:14.737 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: SELECT id, name FROM blog.t_type order by id desc LIMIT ?
2020-11-08 09:46:14.740 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 5(Integer)
2020-11-08 09:46:14.745 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 5
2020-11-08 09:46:14.747  INFO 2820 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/types
2020-11-08 09:46:23.950  INFO 2820 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/blogs', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.BlogController.showBlog', args参数：[{}, 1]}
2020-11-08 09:46:23.961 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id
2020-11-08 09:46:23.964 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : ==> Parameters: 
2020-11-08 09:46:23.967 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : <==      Total: 1
2020-11-08 09:46:23.974 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.getAllBlog          : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.type_id, b.published, b.commentabled, b.share_statement, t.id typeid, t.name typename FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2020-11-08 09:46:23.975 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.getAllBlog          : ==> Parameters: 3(Integer)
2020-11-08 09:46:23.989 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.getAllBlog          : <==      Total: 3
2020-11-08 09:46:23.991 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: select id,name from blog.t_type;
2020-11-08 09:46:23.992 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 
2020-11-08 09:46:24.003 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 14
2020-11-08 09:46:24.005  INFO 2820 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/blogs
2020-11-08 09:46:40.112  INFO 2820 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/blogs/input', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.BlogController.toAddBlog', args参数：[{}]}
2020-11-08 09:46:40.115 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: select id,name from blog.t_type;
2020-11-08 09:46:40.116 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 
2020-11-08 09:46:40.120 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 14
2020-11-08 09:46:40.122 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.TagMapper.selectAllTags        : ==>  Preparing: select id,name from blog.t_tag
2020-11-08 09:46:40.123 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.TagMapper.selectAllTags        : ==> Parameters: 
2020-11-08 09:46:40.127 DEBUG 2820 --- [http-nio-8080-exec-6] c.s.p.dao.TagMapper.selectAllTags        : <==      Total: 14
2020-11-08 09:46:40.128  INFO 2820 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/blog-input
2020-11-08 09:50:01.269  INFO 2820 --- [http-nio-8080-exec-8] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/blogs', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.BlogController.addBlog', args参数：[com.simplem.personal_blog.model.Blog@4d997f4f, {}, org.apache.catalina.session.StandardSessionFacade@3d20019c]}
2020-11-08 09:50:01.275 DEBUG 2820 --- [http-nio-8080-exec-8] c.s.p.dao.TypeMapper.selectById          : ==>  Preparing: select id,name from blog.t_type where id = ?;
2020-11-08 09:50:01.278 DEBUG 2820 --- [http-nio-8080-exec-8] c.s.p.dao.TypeMapper.selectById          : ==> Parameters: 74(Long)
2020-11-08 09:50:01.283 DEBUG 2820 --- [http-nio-8080-exec-8] c.s.p.dao.TypeMapper.selectById          : <==      Total: 1
2020-11-08 09:50:01.288 DEBUG 2820 --- [http-nio-8080-exec-8] c.s.p.dao.TagMapper.findAllByIds         : ==>  Preparing: select id,name from t_tag WHERE id in ( ? )
2020-11-08 09:50:01.289 DEBUG 2820 --- [http-nio-8080-exec-8] c.s.p.dao.TagMapper.findAllByIds         : ==> Parameters: 57(Long)
2020-11-08 09:50:01.291 DEBUG 2820 --- [http-nio-8080-exec-8] c.s.p.dao.TagMapper.findAllByIds         : <==      Total: 1
2020-11-08 09:50:01.295 DEBUG 2820 --- [http-nio-8080-exec-8] c.s.personal_blog.dao.BlogMapper.save    : ==>  Preparing: insert into t_blog(id,title,content,first_picture,flag,views,description,appreciation,share_statement, commentabled,published,recommend,create_time,update_time,type_id,user_id) values (?,?, ?,?,?,?,?,?,?, ?,?,?,?,?,?,?);
2020-11-08 09:50:01.302 DEBUG 2820 --- [http-nio-8080-exec-8] c.s.personal_blog.dao.BlogMapper.save    : ==> Parameters: null, 设计模式---单例模式(String), ## 一、什么是单例

单例模式是一种常用的软件设计模式，他的定义是单例对象的类只能允许一个实例存在。

许多时候一个项目只需要拥有一个全局对象，我们就可以使用单例的思想，这样有利于优化程序运行时所占的内存，也能协调系统整体的行为。

- 注意：
   	单例类只能有一个实例。
   	单例类必须自己创建自己的唯一实例。
   	单例类必须给所有其他对象提供这一实例。

明确定义和让我们看看代码

## 二、饿汉式

```java
public class EagerSingletonEx {
	//私有化使外部不能直接调用
    //静态是为了可以直接return
    private static EagerSingletonEx instance = new EagerSingletonEx();

    //私有的无参构造器,使外部不能new对象
    private EagerSingletonEx(){

    }

    //通过getInstance方法来返回一个instance对象
    public static EagerSingletonEx getInstance(){
        return instance;
    }
}
```

以上就是饿汉式单例，他在类加载时就把单例初始化完成，保证getInstance()的时候，单例是已经存在的了。

饿汉式时线程安全的，这种方式比较常用，因为没有加锁，执行效率会提高，但容易产生垃圾对象。

他在类加载时就初始化，会浪费内存。

## 三、懒汉式

```java
public class LazySingleton {
    //私有化使外部不能直接调用
    //静态是为了可以直接return
    private static LazySingleton m_instance = null;

    //无参构造器,外部不能new
    private LazySingleton(){

    }

    //getInstance方法种判断一下m_instance是否被创建,创建了则返回已有对象,没创建就创建新对象
    synchronized public static LazySingleton getInstance(){
        if (m_instance==null){
            return new LazySingleton();
        }else {
            return m_instance;
        }
    }
}
```

懒汉式比较懒，只有当调用getInstance的时候，才会去初始化这个单例。这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，在多线程不能正常工作，所以严格意义上它并不算单例模式。

## 四、饿汉式和懒汉式对比

### 1、线程安全：

- 饿汉式天生就是线程安全的，可以直接用于多线程而不会出现问题，

- 懒汉式本身是非线程安全的，为了实现线程安全有几种写法。

```java
public class SingletonLHsyn {
    
    private static SingletonLHsyn instance;
    
    private SingletonLHsyn (){}
    
    //在这加了一个synchronized，使它变成了线程安全的
    public static synchronized SingletonLHsyn getInstance() {
        if (instance == null) {
            instance = new SingletonLHsyn();
        }
        return instance;
    }
}
```

这种方式具备很好的 lazy loading，他在第一次调用才初始化，避免了内存浪费，能够在多线程中很好的工作。

但是，效率很低，必须加锁 synchronized 才能保证单例，但加锁会影响效率。

不过getInstance() 的性能对应用程序不是很关键（因为该方法使用不太频繁）。

### 2、资源加载和性能：

饿汉式在类创建的同时就实例化一个静态对象出来，不管之后会不会使用这个单例，都会占据一定的内存，但是相应的，在第一次调用时速度也会更快，因为其资源已经初始化完成。

而懒汉式顾名思义，会延迟加载，在第一次使用该单例的时候才会实例化对象出来，第一次调用时要做初始化，如果要做的工作比较多，性能上会有些延迟，之后就和饿汉式一样了。

## 五、Spring中的单例实现

```java
public class ResSingleton {
    
    private static HashMap map = new HashMap();

    //静态块，在类被加载时自动执行
    static {
        ResSingleton singleton = new ResSingleton();
        //key==类名  value==ResSingleton对象
        map.put(singleton.getClass().getName(), singleton);
    }

    //受保护的默认构造函数，如果为继承关系，则可以调用，克服了单例类不能为继承的缺点  
    protected ResSingleton(){}

    public static ResSingleton getInstance(String name){
        
        //判断当前传入的name值是否为null
        if (null==name){
            //是的话就将类名给他
            name = ResSingleton.class.getName();
        }
        
        //如果key不是null,检查一下value有没有值
        //不为null就说明在map中之前创建过这个实例，直接返回这个实例。
        if (null == map.get(name)){
            try {
                //如果是空就使用反射创建一个实例
                //此时key为传入的name，value为这个类名对应的类
                map.put(name, Class.forName(name).newInstance());

            }catch (Exception e){
                System.out.println("Error happened!\n" + e.getMessage());
            }
        }
        //返回实例
        return (ResSingleton) map.get(name);
    }

}

```

简单地说就是你给我一个类名，我去Map中根据你给我的名字查找，有实例我就直接给你，没有对应的实例我就使用反射创建一个实例给你。

它其实就是工厂模式的一种，帮你管理实例的产生。(String), https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1300342977,1378703714&fm=15&gp=0.jpg(String), 原创(String), 1(Integer), 单例模式是一种常用的软件设计模式，他的定义是单例对象的类只能允许一个实例存在。许多时候一个项目只需要拥有一个全局对象，我们就可以使用单例的思想，这样有利于优化程序运行时所占的内存，也能协调系统整体的行为。(String), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2020-11-08 09:50:01.294(Timestamp), 2020-11-08 09:50:01.294(Timestamp), 74(Long), 2(Long)
2020-11-08 09:50:01.309 DEBUG 2820 --- [http-nio-8080-exec-8] c.s.personal_blog.dao.BlogMapper.save    : <==    Updates: 1
2020-11-08 09:50:01.316 DEBUG 2820 --- [http-nio-8080-exec-8] c.s.p.dao.BlogTagsMapper.insertBlogTag   : ==>  Preparing: insert into t_blog_tags(blogs_id,tags_id) values (?,?);
2020-11-08 09:50:01.317 DEBUG 2820 --- [http-nio-8080-exec-8] c.s.p.dao.BlogTagsMapper.insertBlogTag   : ==> Parameters: 73(Long), 57(Long)
2020-11-08 09:50:01.319 DEBUG 2820 --- [http-nio-8080-exec-8] c.s.p.dao.BlogTagsMapper.insertBlogTag   : <==    Updates: 1
2020-11-08 09:50:01.322  INFO 2820 --- [http-nio-8080-exec-8] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: redirect:/admin/blogs
2020-11-08 09:50:01.331  INFO 2820 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/blogs', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.BlogController.showBlog', args参数：[{success=保存成功！}, 1]}
2020-11-08 09:50:01.335 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id
2020-11-08 09:50:01.336 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : ==> Parameters: 
2020-11-08 09:50:01.337 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : <==      Total: 1
2020-11-08 09:50:01.338 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getAllBlog          : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.type_id, b.published, b.commentabled, b.share_statement, t.id typeid, t.name typename FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2020-11-08 09:50:01.338 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getAllBlog          : ==> Parameters: 3(Integer)
2020-11-08 09:50:01.340 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getAllBlog          : <==      Total: 3
2020-11-08 09:50:01.341 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: select id,name from blog.t_type;
2020-11-08 09:50:01.341 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 
2020-11-08 09:50:01.346 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 14
2020-11-08 09:50:01.346  INFO 2820 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/blogs
2020-11-08 09:50:05.617  INFO 2820 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.index', args参数：[1, {}]}
2020-11-08 09:50:05.627 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll_COUNT       : ==>  Preparing: SELECT count(0) FROM (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published
2020-11-08 09:50:05.629 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll_COUNT       : ==> Parameters: 
2020-11-08 09:50:05.633 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll_COUNT       : <==      Total: 1
2020-11-08 09:50:05.635 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll             : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published order by b.update_time desc LIMIT ?
2020-11-08 09:50:05.636 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll             : ==> Parameters: 5(Integer)
2020-11-08 09:50:05.649 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll             : <==      Total: 5
2020-11-08 09:50:05.651 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.getIndexType        : ==>  Preparing: select b.id bid, b.title, b.type_id, t.id tid, t.name from t_type t inner join t_blog b on t.id = b.type_id
2020-11-08 09:50:05.652 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.getIndexType        : ==> Parameters: 
2020-11-08 09:50:05.658 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.getIndexType        : <==      Total: 5
2020-11-08 09:50:05.661 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.TagMapper.getIndexTag          : ==>  Preparing: SELECT t.id tid,t.name, b.id bid FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id
2020-11-08 09:50:05.662 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.TagMapper.getIndexTag          : ==> Parameters: 
2020-11-08 09:50:05.669 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.TagMapper.getIndexTag          : <==      Total: 8
2020-11-08 09:50:05.672 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findRecommendBlogs  : ==>  Preparing: select b.id, b.title, b.update_time from t_blog b where b.published and b.commentabled order by update_time desc limit 5
2020-11-08 09:50:05.673 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findRecommendBlogs  : ==> Parameters: 
2020-11-08 09:50:05.678 DEBUG 2820 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findRecommendBlogs  : <==      Total: 5
2020-11-08 09:50:05.680  INFO 2820 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: index
2020-11-08 09:50:06.449  INFO 2820 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:50:06.450 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:50:06.450 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:50:06.451 DEBUG 2820 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:50:06.451  INFO 2820 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:54:14.086  INFO 2820 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/blog/73', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.BlogShowController.showBlog', args参数：[73, {}]}
2020-11-08 09:54:14.089 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.selectBlogById      : ==>  Preparing: select b.id, b.title, b.content, b.views, b.first_picture, b.flag, b.appreciation, b.share_statement, b.commentabled, b.recommend, b.update_time, t.name, t.id tid, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published and b.id = ? order by b.update_time desc
2020-11-08 09:54:14.089 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.selectBlogById      : ==> Parameters: 73(Long)
2020-11-08 09:54:14.091 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.selectBlogById      : <==      Total: 1
2020-11-08 09:54:14.098 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.updateViews         : ==>  Preparing: update t_blog set views = views +1 where id = ?
2020-11-08 09:54:14.098 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.updateViews         : ==> Parameters: 73(Long)
2020-11-08 09:54:14.099 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.updateViews         : <==    Updates: 1
2020-11-08 09:54:14.102 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.BlogTagsMapper.selectByBlogId  : ==>  Preparing: select tags_id from t_blog_tags where blogs_id = ?
2020-11-08 09:54:14.103 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.BlogTagsMapper.selectByBlogId  : ==> Parameters: 73(Long)
2020-11-08 09:54:14.104 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.BlogTagsMapper.selectByBlogId  : <==      Total: 1
2020-11-08 09:54:14.105 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.findAllByIds         : ==>  Preparing: select id,name from t_tag WHERE id in ( ? )
2020-11-08 09:54:14.105 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.findAllByIds         : ==> Parameters: 57(Long)
2020-11-08 09:54:14.106 DEBUG 2820 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.findAllByIds         : <==      Total: 1
2020-11-08 09:54:14.107  INFO 2820 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: blog
2020-11-08 09:54:15.142  INFO 2820 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 09:54:15.143 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 09:54:15.143 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 09:54:15.145 DEBUG 2820 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 09:54:15.145  INFO 2820 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 09:54:15.328  INFO 2820 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/comments/73', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.CommentController.getComment', args参数：[73, {}]}
2020-11-08 09:54:15.329 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.d.C.listCommentByBlogId            : ==>  Preparing: select * from t_comment where blog_id = ? and parent_comment_id is null order by create_time DESC
2020-11-08 09:54:15.329 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.d.C.listCommentByBlogId            : ==> Parameters: 73(Long)
2020-11-08 09:54:15.332 DEBUG 2820 --- [http-nio-8080-exec-10] c.s.p.d.C.listCommentByBlogId            : <==      Total: 0
2020-11-08 09:54:15.332  INFO 2820 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: blog :: commentList
2020-11-08 09:59:50.617  INFO 6920 --- [main] c.s.p.PersonalBlogApplication            : Starting PersonalBlogApplication on m with PID 6920 (D:\myblog-mybatis\target\classes started by 　　　 in D:\myblog-mybatis)
2020-11-08 09:59:50.620 DEBUG 6920 --- [main] c.s.p.PersonalBlogApplication            : Running with Spring Boot v2.3.4.RELEASE, Spring v5.2.9.RELEASE
2020-11-08 09:59:50.621  INFO 6920 --- [main] c.s.p.PersonalBlogApplication            : No active profile set, falling back to default profiles: default
2020-11-08 09:59:52.184  INFO 6920 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-11-08 09:59:52.194  INFO 6920 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-11-08 09:59:52.194  INFO 6920 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.38]
2020-11-08 09:59:52.296  INFO 6920 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-11-08 09:59:52.296  INFO 6920 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1620 ms
2020-11-08 09:59:52.959  INFO 6920 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-11-08 09:59:53.132  INFO 6920 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-11-08 09:59:53.408  INFO 6920 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-11-08 09:59:53.420  INFO 6920 --- [main] c.s.p.PersonalBlogApplication            : Started PersonalBlogApplication in 3.631 seconds (JVM running for 4.615)
2020-11-08 09:59:59.155  INFO 6920 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-11-08 09:59:59.155  INFO 6920 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-11-08 09:59:59.179  INFO 6920 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 22 ms
2020-11-08 10:00:01.890  INFO 6920 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/login', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.LoginController.login', args参数：[admin, admin, org.apache.catalina.session.StandardSessionFacade@5a6e9eb0, {}]}
2020-11-08 10:00:01.907  INFO 6920 --- [http-nio-8080-exec-4] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-11-08 10:00:02.059  INFO 6920 --- [http-nio-8080-exec-4] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-11-08 10:00:02.087 DEBUG 6920 --- [http-nio-8080-exec-4] c.s.p.d.U.queryByUsernameAndPassword     : ==>  Preparing: select id,nickname,avatar,email from blog.t_user where username = ? and password = ?;
2020-11-08 10:00:02.114 DEBUG 6920 --- [http-nio-8080-exec-4] c.s.p.d.U.queryByUsernameAndPassword     : ==> Parameters: admin(String), 21232f297a57a5a743894a0e4a801fc3(String)
2020-11-08 10:00:02.135 DEBUG 6920 --- [http-nio-8080-exec-4] c.s.p.d.U.queryByUsernameAndPassword     : <==      Total: 1
2020-11-08 10:00:02.141  INFO 6920 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/index
2020-11-08 10:00:06.770  INFO 6920 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/blogs', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.BlogController.showBlog', args参数：[{}, 1]}
2020-11-08 10:00:06.942 DEBUG 6920 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id
2020-11-08 10:00:06.942 DEBUG 6920 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : ==> Parameters: 
2020-11-08 10:00:06.945 DEBUG 6920 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : <==      Total: 1
2020-11-08 10:00:06.949 DEBUG 6920 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.getAllBlog          : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.type_id, b.published, b.commentabled, b.share_statement, t.id typeid, t.name typename FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2020-11-08 10:00:06.952 DEBUG 6920 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.getAllBlog          : ==> Parameters: 5(Integer)
2020-11-08 10:00:06.960 DEBUG 6920 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.getAllBlog          : <==      Total: 5
2020-11-08 10:00:06.962 DEBUG 6920 --- [http-nio-8080-exec-5] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: select id,name from blog.t_type;
2020-11-08 10:00:06.963 DEBUG 6920 --- [http-nio-8080-exec-5] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 
2020-11-08 10:00:06.966 DEBUG 6920 --- [http-nio-8080-exec-5] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 14
2020-11-08 10:00:06.966  INFO 6920 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/blogs
2020-11-08 10:00:27.876  INFO 6920 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/types', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TypeController.getTypes', args参数：[{}, 1]}
2020-11-08 10:00:27.894 DEBUG 6920 --- [http-nio-8080-exec-10] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_type
2020-11-08 10:00:27.895 DEBUG 6920 --- [http-nio-8080-exec-10] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==> Parameters: 
2020-11-08 10:00:27.898 DEBUG 6920 --- [http-nio-8080-exec-10] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : <==      Total: 1
2020-11-08 10:00:27.903 DEBUG 6920 --- [http-nio-8080-exec-10] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: SELECT id, name FROM blog.t_type order by id desc LIMIT ?
2020-11-08 10:00:27.904 DEBUG 6920 --- [http-nio-8080-exec-10] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 5(Integer)
2020-11-08 10:00:27.908 DEBUG 6920 --- [http-nio-8080-exec-10] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 5
2020-11-08 10:00:27.910  INFO 6920 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/types
2020-11-08 10:00:30.697  INFO 6920 --- [http-nio-8080-exec-9] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/tags', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TagController.showTags', args参数：[1, {}]}
2020-11-08 10:00:30.708 DEBUG 6920 --- [http-nio-8080-exec-9] c.s.p.dao.TagMapper.selectAllTags_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_tag
2020-11-08 10:00:30.709 DEBUG 6920 --- [http-nio-8080-exec-9] c.s.p.dao.TagMapper.selectAllTags_COUNT  : ==> Parameters: 
2020-11-08 10:00:30.714 DEBUG 6920 --- [http-nio-8080-exec-9] c.s.p.dao.TagMapper.selectAllTags_COUNT  : <==      Total: 1
2020-11-08 10:00:30.715 DEBUG 6920 --- [http-nio-8080-exec-9] c.s.p.dao.TagMapper.selectAllTags        : ==>  Preparing: SELECT id, name FROM blog.t_tag order by id desc LIMIT ?
2020-11-08 10:00:30.717 DEBUG 6920 --- [http-nio-8080-exec-9] c.s.p.dao.TagMapper.selectAllTags        : ==> Parameters: 5(Integer)
2020-11-08 10:00:30.719 DEBUG 6920 --- [http-nio-8080-exec-9] c.s.p.dao.TagMapper.selectAllTags        : <==      Total: 5
2020-11-08 10:00:30.719  INFO 6920 --- [http-nio-8080-exec-9] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: /admin/tags
2020-11-08 10:00:35.592  INFO 6920 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/types', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TypeController.getTypes', args参数：[{}, 1]}
2020-11-08 10:00:35.597 DEBUG 6920 --- [http-nio-8080-exec-2] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_type
2020-11-08 10:00:35.599 DEBUG 6920 --- [http-nio-8080-exec-2] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==> Parameters: 
2020-11-08 10:00:35.603 DEBUG 6920 --- [http-nio-8080-exec-2] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : <==      Total: 1
2020-11-08 10:00:35.607 DEBUG 6920 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: SELECT id, name FROM blog.t_type order by id desc LIMIT ?
2020-11-08 10:00:35.608 DEBUG 6920 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 5(Integer)
2020-11-08 10:00:35.614 DEBUG 6920 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 5
2020-11-08 10:00:35.616  INFO 6920 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/types
2020-11-08 10:00:41.227  INFO 6920 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/types', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TypeController.getTypes', args参数：[{}, 2]}
2020-11-08 10:00:41.232 DEBUG 6920 --- [http-nio-8080-exec-3] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_type
2020-11-08 10:00:41.234 DEBUG 6920 --- [http-nio-8080-exec-3] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==> Parameters: 
2020-11-08 10:00:41.238 DEBUG 6920 --- [http-nio-8080-exec-3] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : <==      Total: 1
2020-11-08 10:00:41.241 DEBUG 6920 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: SELECT id, name FROM blog.t_type order by id desc LIMIT ?, ?
2020-11-08 10:00:41.243 DEBUG 6920 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 5(Integer), 5(Integer)
2020-11-08 10:00:41.250 DEBUG 6920 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 5
2020-11-08 10:00:41.253  INFO 6920 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/types
2020-11-08 10:00:43.402  INFO 6920 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/types', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TypeController.getTypes', args参数：[{}, 3]}
2020-11-08 10:00:43.407 DEBUG 6920 --- [http-nio-8080-exec-4] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_type
2020-11-08 10:00:43.409 DEBUG 6920 --- [http-nio-8080-exec-4] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==> Parameters: 
2020-11-08 10:00:43.413 DEBUG 6920 --- [http-nio-8080-exec-4] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : <==      Total: 1
2020-11-08 10:00:43.417 DEBUG 6920 --- [http-nio-8080-exec-4] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: SELECT id, name FROM blog.t_type order by id desc LIMIT ?, ?
2020-11-08 10:00:43.419 DEBUG 6920 --- [http-nio-8080-exec-4] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 10(Integer), 5(Integer)
2020-11-08 10:00:43.425 DEBUG 6920 --- [http-nio-8080-exec-4] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 4
2020-11-08 10:00:43.428  INFO 6920 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/types
2020-11-08 10:16:42.792  INFO 6920 --- [http-nio-8080-exec-9] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/types', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TypeController.getTypes', args参数：[{}, 2]}
2020-11-08 10:16:42.806 DEBUG 6920 --- [http-nio-8080-exec-9] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_type
2020-11-08 10:16:42.808 DEBUG 6920 --- [http-nio-8080-exec-9] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==> Parameters: 
2020-11-08 10:16:42.813 DEBUG 6920 --- [http-nio-8080-exec-9] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : <==      Total: 1
2020-11-08 10:16:42.816 DEBUG 6920 --- [http-nio-8080-exec-9] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: SELECT id, name FROM blog.t_type order by id desc LIMIT ?, ?
2020-11-08 10:16:42.820 DEBUG 6920 --- [http-nio-8080-exec-9] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 5(Integer), 5(Integer)
2020-11-08 10:16:42.831 DEBUG 6920 --- [http-nio-8080-exec-9] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 5
2020-11-08 10:16:42.839  INFO 6920 --- [http-nio-8080-exec-9] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/types
2020-11-08 10:16:45.772  INFO 6920 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/types', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TypeController.getTypes', args参数：[{}, 1]}
2020-11-08 10:16:45.777 DEBUG 6920 --- [http-nio-8080-exec-1] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_type
2020-11-08 10:16:45.778 DEBUG 6920 --- [http-nio-8080-exec-1] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==> Parameters: 
2020-11-08 10:16:45.782 DEBUG 6920 --- [http-nio-8080-exec-1] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : <==      Total: 1
2020-11-08 10:16:45.786 DEBUG 6920 --- [http-nio-8080-exec-1] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: SELECT id, name FROM blog.t_type order by id desc LIMIT ?
2020-11-08 10:16:45.787 DEBUG 6920 --- [http-nio-8080-exec-1] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 5(Integer)
2020-11-08 10:16:45.792 DEBUG 6920 --- [http-nio-8080-exec-1] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 5
2020-11-08 10:16:45.794  INFO 6920 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/types
2020-11-08 10:16:49.186  INFO 6920 --- [http-nio-8080-exec-8] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/blogs', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.BlogController.showBlog', args参数：[{}, 1]}
2020-11-08 10:16:49.216 DEBUG 6920 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id
2020-11-08 10:16:49.218 DEBUG 6920 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : ==> Parameters: 
2020-11-08 10:16:49.223 DEBUG 6920 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : <==      Total: 1
2020-11-08 10:16:49.231 DEBUG 6920 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.getAllBlog          : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.type_id, b.published, b.commentabled, b.share_statement, t.id typeid, t.name typename FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2020-11-08 10:16:49.233 DEBUG 6920 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.getAllBlog          : ==> Parameters: 5(Integer)
2020-11-08 10:16:49.251 DEBUG 6920 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.getAllBlog          : <==      Total: 5
2020-11-08 10:16:49.258 DEBUG 6920 --- [http-nio-8080-exec-8] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: select id,name from blog.t_type;
2020-11-08 10:16:49.259 DEBUG 6920 --- [http-nio-8080-exec-8] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 
2020-11-08 10:16:49.268 DEBUG 6920 --- [http-nio-8080-exec-8] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 14
2020-11-08 10:16:49.270  INFO 6920 --- [http-nio-8080-exec-8] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/blogs
2020-11-08 10:17:54.073  INFO 6920 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/blogs/input', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.BlogController.toAddBlog', args参数：[{}]}
2020-11-08 10:17:54.080 DEBUG 6920 --- [http-nio-8080-exec-4] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: select id,name from blog.t_type;
2020-11-08 10:17:54.082 DEBUG 6920 --- [http-nio-8080-exec-4] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 
2020-11-08 10:17:54.088 DEBUG 6920 --- [http-nio-8080-exec-4] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 14
2020-11-08 10:17:54.090 DEBUG 6920 --- [http-nio-8080-exec-4] c.s.p.dao.TagMapper.selectAllTags        : ==>  Preparing: select id,name from blog.t_tag
2020-11-08 10:17:54.090 DEBUG 6920 --- [http-nio-8080-exec-4] c.s.p.dao.TagMapper.selectAllTags        : ==> Parameters: 
2020-11-08 10:17:54.096 DEBUG 6920 --- [http-nio-8080-exec-4] c.s.p.dao.TagMapper.selectAllTags        : <==      Total: 14
2020-11-08 10:17:54.097  INFO 6920 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/blog-input
2020-11-08 10:52:55.475  WARN 6920 --- [http-nio-8080-exec-7] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' not supported]
2020-11-08 10:53:26.340  WARN 6920 --- [http-nio-8080-exec-3] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' not supported]
2020-11-08 10:54:36.894  INFO 4252 --- [main] c.s.p.PersonalBlogApplication            : Starting PersonalBlogApplication on m with PID 4252 (D:\myblog-mybatis\target\classes started by 　　　 in D:\myblog-mybatis)
2020-11-08 10:54:36.903 DEBUG 4252 --- [main] c.s.p.PersonalBlogApplication            : Running with Spring Boot v2.3.4.RELEASE, Spring v5.2.9.RELEASE
2020-11-08 10:54:36.904  INFO 4252 --- [main] c.s.p.PersonalBlogApplication            : No active profile set, falling back to default profiles: default
2020-11-08 10:54:39.330  INFO 4252 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-11-08 10:54:39.343  INFO 4252 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-11-08 10:54:39.344  INFO 4252 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.38]
2020-11-08 10:54:39.523  INFO 4252 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-11-08 10:54:39.524  INFO 4252 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2448 ms
2020-11-08 10:54:40.859  INFO 4252 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-11-08 10:54:41.065  INFO 4252 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-11-08 10:54:41.336  INFO 4252 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-11-08 10:54:41.347  INFO 4252 --- [main] c.s.p.PersonalBlogApplication            : Started PersonalBlogApplication in 5.299 seconds (JVM running for 6.602)
2020-11-08 10:54:59.458  INFO 4252 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-11-08 10:54:59.459  INFO 4252 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-11-08 10:54:59.486  INFO 4252 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 27 ms
2020-11-08 10:54:59.531  WARN 4252 --- [http-nio-8080-exec-2] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' not supported]
2020-11-08 10:55:06.102  INFO 4252 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/login', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.LoginController.login', args参数：[admin, admin, org.apache.catalina.session.StandardSessionFacade@7ab2e4a, {}]}
2020-11-08 10:55:06.131  INFO 4252 --- [http-nio-8080-exec-7] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-11-08 10:55:06.317  INFO 4252 --- [http-nio-8080-exec-7] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-11-08 10:55:06.356 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.d.U.queryByUsernameAndPassword     : ==>  Preparing: select id,nickname,avatar,email from blog.t_user where username = ? and password = ?;
2020-11-08 10:55:06.385 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.d.U.queryByUsernameAndPassword     : ==> Parameters: admin(String), 21232f297a57a5a743894a0e4a801fc3(String)
2020-11-08 10:55:06.412 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.d.U.queryByUsernameAndPassword     : <==      Total: 1
2020-11-08 10:55:06.419  INFO 4252 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/index
2020-11-08 10:55:08.898  INFO 4252 --- [http-nio-8080-exec-9] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/blogs', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.BlogController.showBlog', args参数：[{}, 1]}
2020-11-08 10:55:09.040 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id
2020-11-08 10:55:09.040 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : ==> Parameters: 
2020-11-08 10:55:09.045 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : <==      Total: 1
2020-11-08 10:55:09.049 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.getAllBlog          : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.type_id, b.published, b.commentabled, b.share_statement, t.id typeid, t.name typename FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2020-11-08 10:55:09.050 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.getAllBlog          : ==> Parameters: 5(Integer)
2020-11-08 10:55:09.057 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.getAllBlog          : <==      Total: 5
2020-11-08 10:55:09.060 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: select id,name from blog.t_type;
2020-11-08 10:55:09.060 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 
2020-11-08 10:55:09.065 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 14
2020-11-08 10:55:09.065  INFO 4252 --- [http-nio-8080-exec-9] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/blogs
2020-11-08 10:55:12.356  INFO 4252 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/blogs/input', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.BlogController.toAddBlog', args参数：[{}]}
2020-11-08 10:55:12.359 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: select id,name from blog.t_type;
2020-11-08 10:55:12.361 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 
2020-11-08 10:55:12.368 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 14
2020-11-08 10:55:12.384 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.TagMapper.selectAllTags        : ==>  Preparing: select id,name from blog.t_tag
2020-11-08 10:55:12.385 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.TagMapper.selectAllTags        : ==> Parameters: 
2020-11-08 10:55:12.401 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.TagMapper.selectAllTags        : <==      Total: 14
2020-11-08 10:55:12.403  INFO 4252 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/blog-input
2020-11-08 10:56:01.721  INFO 4252 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/blogs', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.BlogController.addBlog', args参数：[com.simplem.personal_blog.model.Blog@4b066b36, {}, org.apache.catalina.session.StandardSessionFacade@7ab2e4a]}
2020-11-08 10:56:01.723 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.TypeMapper.selectById          : ==>  Preparing: select id,name from blog.t_type where id = ?;
2020-11-08 10:56:01.723 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.TypeMapper.selectById          : ==> Parameters: 74(Long)
2020-11-08 10:56:01.727 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.TypeMapper.selectById          : <==      Total: 1
2020-11-08 10:56:01.764 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.findAllByIds         : ==>  Preparing: select id,name from t_tag WHERE id in ( ? , ? )
2020-11-08 10:56:01.765 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.findAllByIds         : ==> Parameters: 50(Long), 57(Long)
2020-11-08 10:56:01.772 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.findAllByIds         : <==      Total: 2
2020-11-08 10:56:01.775 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.personal_blog.dao.BlogMapper.save    : ==>  Preparing: insert into t_blog(id,title,content,first_picture,flag,views,description,appreciation,share_statement, commentabled,published,recommend,create_time,update_time,type_id,user_id) values (?,?, ?,?,?,?,?,?,?, ?,?,?,?,?,?,?);
2020-11-08 10:56:01.781 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.personal_blog.dao.BlogMapper.save    : ==> Parameters: null, Spring学习笔记01(String), # Spring框架笔记

## 1.优点

- Spring是一个开源的免费的框架（容器）！
- Spring是一个轻量级的、非入侵式的框架！
- 控制反转（IOC）、面向切面编程（AOP）
- 支持事务的处理，对框架整合的支持！

总结一句话：Spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架

# 2.IOC本质

**控制反转，是一种设计思想，DI（依赖注入）是实现IoC的一种方法，**也有人认为DI只是IoC的另一种说法，没有IoC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。

 

采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注释的方式可以把两者何为一体，Bean的定义信息直接以注释的形式定义在实现类中，从而达到了零配置的目的。

 

**控制反转是一种通过描述（XML或注解）并通过第三方法生产或获取特定对象的方式，在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入。**

 

# 3.IOC创建对象的方式

1. 使用无参构造创建对象，默认

2. 假设我们要使用有参构造创建对象。

   1. 下标赋值

      ```xml
      <!--第一种，下标赋值-->
      <bean id = "User" class = "org.wdzl.entity.User">    
          <constructor-arg index= "0" value="你好啊">   
      </bean>
      ```

   2. 类型

      ```xml
      <!--第二种方式：通过类型创建，不建议使用-->
      <bean id="User" class = "org.wdzl.entity.User">  
          <constructor-arg type= "java.lang.String" value="mhy"> 
      </bean>
      ```

3.参数名

```xml
<!--第三种，直接通过参数名来设置--> 
<bean id="User" class = "org.wdzl.entity.User"> 
    <constructor-arg name= "name"value="mhy"> 
</bean> 
```

总结：在配置文件加载的时候，容器中管理的对象就已经初始化了！

# 4.Spring配置说明

## 4.1、别名

```xml
<!--别名，如果添加了别名，我们也可以使用别名获取到这个对象-->
<alias name ="user" alias="userNew">
```

## 4.2、Bean的配置

```xml
<!--    id : bean 的唯一标识符，也就是相当于我们学的对象名     
		class:bean 对象所对应的权限定名：包名 + 类型     
		name : 也是别名，而且name可以同时取多个别名-->
<bean id = ""  class=""   name=""> </bean>
```

## 4.3、import

这个import，一般用于团队开发使用，它可以将多个配置文件，导入合并为一个

假设，想在项目中有多个人在开发使用，这三个人负责不同的类开发，不同的类需要注册在不容的bean中，我们可以利用import将所有人的beans.xml合并为一个总的！

- 张三
- 李四
- 王五
- applicationContext.xml

```xml
<import resource = "beans.xml">    
<import resource = "beans1.xml">        
<import resource = "beans2.xml">
```

使用的时候，直接使用总的配置就可以了

# 5、依赖注入

## 5.1、构造器注入

就是前面的方法

## 5.2、Set方式注入（***重点）

- 依赖注入：Set注入！

  - 依赖：bean对象的创建依赖于容器

  - 注入：bean对象中的所有属性，由容器来注入

    【环境搭建】

    1. 复杂类型

```java
public class Address {
    private String address;
    public String getAddress() {
        return address;
    }
    public void setAddress(String address) {
        this.address = address;
    }
}
```


2. 真实测试对象

 ```java
public class Student {
    	private String name;
    	private Address address;
    	private String[] books;
    	private List<String> hobbys;
    	private Map<String, String> card;
    	private Set<String> games;
    	private String wife;
    	private Properties info;
    	
    	public String getName() {
    	    return name;
    	}
    	public void setName(String name) {
    	    this.name = name;
    	}
    	public Address getAddress() {
    	    return address;
    	}
    	public void setAddress(Address address) {
    	    this.address = address;
    	}
    	public String[] getBooks() {
    	    return books;
    	}
    	public void setBooks(String[] books) {
    	    this.books = books;
    	}
    	public List<String> getHobbys() {
    	    return hobbys;
    	}
    	public void setHobbys(List<String> hobbys) {
    	    this.hobbys = hobbys;
    	}
    	public Map<String, String> getCard() {
    	    return card;
    	}
    	public void setCard(Map<String, String> card) {
    	    this.card = card;
    	}
    	public Set<String> getGames() {
    	    return games;
    	}
    	public void setGames(Set<String> games) {
    	    this.games = games;
    	}
    	public String getWife() {
    	    return wife;
    	}
    	public void setWife(String wife) {
    	    this.wife = wife;
    	}
    	public Properties getInfo() {
    	    return info;
    	}
    	public void setInfo(Properties info) {
    	    this.info = info;
    	}
}
 ```

3.beans.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
  <bean id = "student" class="org.wdzl.pojo.Student">
      <!--第一种，普通值注入，value-->
      <property name="name" value="mhy"/>
  </bean>
</beans>
```

4.完善注入信息

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id = "address" class="org.wdzl.pojo.Address">
    <property name="address" value="武汉"/>
    </bean>>


    <bean id = "student" class="org.wdzl.pojo.Student">
      <!--第一种，普通值注入，value-->
      <property name="name" value="mhy"/>

      <!--第二种，bean注入，ref-->
      <property name="address" ref="address"/>

      <!--数组注入，ref-->
      <property name="books">
          <array>
              <value>红楼梦</value>
              <value>西游记</value>
              <value>水浒传</value>
              <value>三国演义</value>
          </array>
      </property>

      <!--list-->
      <property name="hobbys">
          <list>
              <value>听歌</value>
              <value>敲代码</value>
              <value>看电视</value>
          </list>
      </property>

      <!--Map-->
      <property name="card" >
          <map>
              <entry key="身份证" value="3165165656465156"></entry>
              <entry key="银行卡" value="36456565498498"></entry>
          </map>
      </property>

      <!--set-->
      <property name="games">
          <set>
              <value>LOL</value>
              <value>COC</value>
              <value>Dota</value>
          </set>
      </property>

       <!--null-->
        <property name="wife">
            <null/>
        </property>

        <!--Properties-->
        <property name="info">
            <props>
                <!--<prop key="学号">03175050</prop>
                <prop key="性别">男</prop>
                <prop key="姓名">小明</prop>-->
                <prop key="driver">03175050</prop>
                <prop key="url">男</prop>
                <prop key="username">小明</prop>
                <prop key="password">123456</prop>

            </props>
        </property>
  </bean>
</beans>
```

标签的属性：

name：用于指定注入时所调用的bean中的set方法名称

value：用于提供基本类型和String类型的数据

ref：用于指定其他的bean的类型，它指的是在Spring的IOC核心容器中出现的bean对象

优势：创建对象是没有明确的限制，可以直接使用默认的构造方法

弊端：如果某个对象中的成员必须有值，则获取对象时必须有set方法注入才可以。

 ### 方法二：通过有参方法进行属性值注入

使用的标签：

```xml
<constructor-arg>
```

出现的位置：bean标签的子标签

标签中的属性：

type:用于指定要注入的数据类型，代表构造方法中某个参数的类型

index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值，索引位置是从0开始

name：用于指定给构造函数中指定名称的参数赋值（常用方式）

value：⽤于提供基本类型和String类型的数据

ref：⽤于指定其他bean类型数据，他指的是在springIOC核⼼容器中出现的bean对象

优势：获取bean对象时，注⼊数据是必须的操作，否则对象⽆法创建

劣势：改变 了bean对象的实例⽅式，使我们创建对象时，如果⽤不到这些数据，也必须提供。

```xml
<?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://www.springframework.org/schema/beans
            https://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- 第一种方式  下标赋值-->
    	<bean id="user" class="hao.pojo.User">
        	<constructor-arg index="0" value="mhy"/>
        </bean>
    
    
    <!--  第二种方式   通过类型创建  不建议使用-->
        <bean id="user" class="hao.pojo.User">-->
            <constructor-arg type="java.lang.String" value="mhy"/>
        </bean>
    
    <!--    第三种方式 直接通过参数名设置-->
        <bean id="user" class="hao.pojo.User">
            <constructor-arg name="name" value="学习"/>
        </bean>
        <bean id="userT" class="hao.pojo.UserT">
        </bean>
        <!--
         alias 别名   但是区分大小写
         bean
         id ： bean 的唯一标识符 也就是相当于我们学的对象名
         class： bean 对象所对应的全限定名  ：  包名+类型
         name： 也就是别名 而且name 可以同时取多个别名
         import一般用于团队开发使用，它可以将多个配置文件 导入合并为一个
         -->
</beans>
    ```

## 5.3、拓展方式注入

我们可以使用p命令和C命令进行注入(p:property，c:constructior)

## 5.4、bean的作用域

1. 单例模式（Spring默认机制）

```xml
<bean id="user2" class="org.wdzl.pojo.User" c:name="mhy" c:age="18" scope="singleton"/>
```

1. 原型模式：每次从容器中get的时候，都会产生一个新对象

```xml
<bean id="user2" class="org.wdzl.pojo.User" c:name="mhy" c:age="18" scope="prototype"/>
```

1. 其余的request，session，application，这些只能在web开发中使用到

    

# 6、bean的自动装配

- 自动装配是spring满足bean依赖的一种方式！
- Spring会在上下文中自动寻找，并自动给bean装配属性

 

在Spring中有三种装配的方式

1. 在xml中显示的配置
2. 在Java中显示配置
3. 隐式的自动装配bean【重要的东西】

## 6.1 测试

1. 环境搭建：一个人有两个宠物

 

## 6.2 ByName自动装配

```xml
 <!--
   byName:会自动在容器上下文中查找，和自己对象set方法后面的值对应的bean id~
   -->
    <bean id="people" class="org.wdzl.pojo.People" autowire="byName">
        <property name="name" value="神啊"/>
		<!--<property name="cat" ref="cat"/>
        <property name="dog" ref="dog"/>-->
    </bean>
```

## 6.3 ByType自动装配

```xml
<bean class="org.wdzl.pojo.Cat"/>
      <bean class="org.wdzl.pojo.Dog"/>

   <!--
   byName:会自动在容器上下文中查找，和自己对象set方法后面的值对应的bean id~
   byType:会自动在容器上下文中查找，和自己对象属性类型相同的对应的bean
   -->
    <bean id="people" class="org.wdzl.pojo.People" autowire="byType">
        <property name="name" value="神啊"/>
<!--        <property name="cat" ref="cat"/>
        <property name="dog" ref="dog"/>-->

    </bean>
```

小结：

- **byname的时候，需要保证所有的bean唯一，并且这个bean需要和自动注入的属性的set的值一致**
- **不要type的时候，需要保证所有的bean的class唯一，并且这个bean需要和自动注入的属性的类型一致**(String), https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=1408371311,2263836872&fm=26&gp=0.jpg(String), 原创(String), 1(Integer), Spring是一个开源的免费的框架（容器）！ Spring是一个轻量级的、非入侵式的框架！控制反转（IOC）、面向切面编程（AOP）支持事务的处理，对框架整合的支持！(String), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2020-11-08 10:56:01.774(Timestamp), 2020-11-08 10:56:01.774(Timestamp), 74(Long), 2(Long)
2020-11-08 10:56:01.823 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.personal_blog.dao.BlogMapper.save    : <==    Updates: 1
2020-11-08 10:56:01.827 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.BlogTagsMapper.insertBlogTag   : ==>  Preparing: insert into t_blog_tags(blogs_id,tags_id) values (?,?);
2020-11-08 10:56:01.828 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.BlogTagsMapper.insertBlogTag   : ==> Parameters: 74(Long), 50(Long)
2020-11-08 10:56:01.848 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.BlogTagsMapper.insertBlogTag   : <==    Updates: 1
2020-11-08 10:56:01.849 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.BlogTagsMapper.insertBlogTag   : ==>  Preparing: insert into t_blog_tags(blogs_id,tags_id) values (?,?);
2020-11-08 10:56:01.850 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.BlogTagsMapper.insertBlogTag   : ==> Parameters: 74(Long), 57(Long)
2020-11-08 10:56:01.866 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.BlogTagsMapper.insertBlogTag   : <==    Updates: 1
2020-11-08 10:56:01.874  INFO 4252 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: redirect:/admin/blogs
2020-11-08 10:56:01.896  INFO 4252 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/blogs', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.BlogController.showBlog', args参数：[{success=保存成功！}, 1]}
2020-11-08 10:56:01.897 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id
2020-11-08 10:56:01.898 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : ==> Parameters: 
2020-11-08 10:56:01.899 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : <==      Total: 1
2020-11-08 10:56:01.900 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getAllBlog          : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.type_id, b.published, b.commentabled, b.share_statement, t.id typeid, t.name typename FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2020-11-08 10:56:01.901 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getAllBlog          : ==> Parameters: 5(Integer)
2020-11-08 10:56:01.904 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getAllBlog          : <==      Total: 5
2020-11-08 10:56:01.905 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: select id,name from blog.t_type;
2020-11-08 10:56:01.905 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 
2020-11-08 10:56:01.906 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 14
2020-11-08 10:56:01.907  INFO 4252 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/blogs
2020-11-08 10:58:27.559  INFO 4252 --- [http-nio-8080-exec-9] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.index', args参数：[1, {}]}
2020-11-08 10:58:27.621 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.findAll_COUNT       : ==>  Preparing: SELECT count(0) FROM (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published
2020-11-08 10:58:27.622 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.findAll_COUNT       : ==> Parameters: 
2020-11-08 10:58:27.627 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.findAll_COUNT       : <==      Total: 1
2020-11-08 10:58:27.628 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.findAll             : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published order by b.update_time desc LIMIT ?
2020-11-08 10:58:27.629 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.findAll             : ==> Parameters: 5(Integer)
2020-11-08 10:58:27.644 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.findAll             : <==      Total: 5
2020-11-08 10:58:27.646 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.TypeMapper.getIndexType        : ==>  Preparing: select b.id bid, b.title, b.type_id, t.id tid, t.name from t_type t inner join t_blog b on t.id = b.type_id
2020-11-08 10:58:27.647 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.TypeMapper.getIndexType        : ==> Parameters: 
2020-11-08 10:58:27.651 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.TypeMapper.getIndexType        : <==      Total: 6
2020-11-08 10:58:27.652 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.TagMapper.getIndexTag          : ==>  Preparing: SELECT t.id tid,t.name, b.id bid FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id
2020-11-08 10:58:27.652 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.TagMapper.getIndexTag          : ==> Parameters: 
2020-11-08 10:58:27.658 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.TagMapper.getIndexTag          : <==      Total: 10
2020-11-08 10:58:27.659 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.findRecommendBlogs  : ==>  Preparing: select b.id, b.title, b.update_time from t_blog b where b.published and b.commentabled order by update_time desc limit 5
2020-11-08 10:58:27.659 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.findRecommendBlogs  : ==> Parameters: 
2020-11-08 10:58:27.662 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.findRecommendBlogs  : <==      Total: 5
2020-11-08 10:58:27.664  INFO 4252 --- [http-nio-8080-exec-9] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: index
2020-11-08 10:58:28.436  INFO 4252 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 10:58:28.439 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 10:58:28.439 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 10:58:28.440 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 10:58:28.441  INFO 4252 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 10:58:47.658  INFO 4252 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/blogs/74/input', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.BlogController.editBlog', args参数：[74, {}]}
2020-11-08 10:58:47.662 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: select id,name from blog.t_type;
2020-11-08 10:58:47.663 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 
2020-11-08 10:58:47.668 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 14
2020-11-08 10:58:47.672 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.selectAllTags        : ==>  Preparing: select id,name from blog.t_tag
2020-11-08 10:58:47.673 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.selectAllTags        : ==> Parameters: 
2020-11-08 10:58:47.676 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.selectAllTags        : <==      Total: 14
2020-11-08 10:58:47.678 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.getBlogById         : ==>  Preparing: select b.id, b.title, b.content, b.first_picture, b.flag, b.appreciation, b.share_statement, b.commentabled, b.recommend, b.description, b.published, b.update_time, t.id tid, t.name from t_blog b inner join t_type t on b.type_id = t.id where b.id = ?
2020-11-08 10:58:47.679 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.getBlogById         : ==> Parameters: 74(Long)
2020-11-08 10:58:47.684 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.getBlogById         : <==      Total: 1
2020-11-08 10:58:47.686 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.BlogTagsMapper.selectByBlogId  : ==>  Preparing: select tags_id from t_blog_tags where blogs_id = ?
2020-11-08 10:58:47.687 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.BlogTagsMapper.selectByBlogId  : ==> Parameters: 74(Long)
2020-11-08 10:58:47.689 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.BlogTagsMapper.selectByBlogId  : <==      Total: 2
2020-11-08 10:58:47.691 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.findAllByIds         : ==>  Preparing: select id,name from t_tag WHERE id in ( ? , ? )
2020-11-08 10:58:47.691 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.findAllByIds         : ==> Parameters: 50(Long), 57(Long)
2020-11-08 10:58:47.693 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.findAllByIds         : <==      Total: 2
2020-11-08 10:58:47.693  INFO 4252 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/blog-input
2020-11-08 10:59:09.908  INFO 4252 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/blogs', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.BlogController.addBlog', args参数：[com.simplem.personal_blog.model.Blog@37983ae9, {}, org.apache.catalina.session.StandardSessionFacade@7ab2e4a]}
2020-11-08 10:59:09.909 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.TypeMapper.selectById          : ==>  Preparing: select id,name from blog.t_type where id = ?;
2020-11-08 10:59:09.910 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.TypeMapper.selectById          : ==> Parameters: 74(Long)
2020-11-08 10:59:09.911 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.TypeMapper.selectById          : <==      Total: 1
2020-11-08 10:59:09.914 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.TagMapper.findAllByIds         : ==>  Preparing: select id,name from t_tag WHERE id in ( ? , ? )
2020-11-08 10:59:09.915 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.TagMapper.findAllByIds         : ==> Parameters: 50(Long), 57(Long)
2020-11-08 10:59:09.917 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.TagMapper.findAllByIds         : <==      Total: 2
2020-11-08 10:59:09.919 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getBlog             : ==>  Preparing: select * from t_blog where id = ?
2020-11-08 10:59:09.919 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getBlog             : ==> Parameters: 74(Long)
2020-11-08 10:59:09.921 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getBlog             : <==      Total: 1
2020-11-08 10:59:09.925 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.personal_blog.dao.BlogMapper.update  : ==>  Preparing: update t_blog set title = ?,content = ?,first_picture=?,description=?, flag = ?,views = ?,appreciation=?,share_statement=?, commentabled=?,published=?,recommend=?,create_time=?, update_time=?,type_id=?,user_id=? where id = ?;
2020-11-08 10:59:09.928 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.personal_blog.dao.BlogMapper.update  : ==> Parameters: Spring学习笔记01(String), # Spring框架笔记

## 1.优点

- Spring是一个开源的免费的框架（容器）！
- Spring是一个轻量级的、非入侵式的框架！
- 控制反转（IOC）、面向切面编程（AOP）
- 支持事务的处理，对框架整合的支持！

总结一句话：Spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架

# 2.IOC本质

**控制反转，是一种设计思想，DI（依赖注入）是实现IoC的一种方法，**也有人认为DI只是IoC的另一种说法，没有IoC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。

 

采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注释的方式可以把两者何为一体，Bean的定义信息直接以注释的形式定义在实现类中，从而达到了零配置的目的。

 

**控制反转是一种通过描述（XML或注解）并通过第三方法生产或获取特定对象的方式，在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入。**

 

# 3.IOC创建对象的方式

1. 使用无参构造创建对象，默认

2. 假设我们要使用有参构造创建对象。

   1. 下标赋值

      ```xml
      <!--第一种，下标赋值-->
      <bean id = "User" class = "org.wdzl.entity.User">    
          <constructor-arg index= "0" value="你好啊">   
      </bean>
      ```

   2. 类型

      ```xml
      <!--第二种方式：通过类型创建，不建议使用-->
      <bean id="User" class = "org.wdzl.entity.User">  
          <constructor-arg type= "java.lang.String" value="mhy"> 
      </bean>
      ```

3.参数名

```xml
<!--第三种，直接通过参数名来设置--> 
<bean id="User" class = "org.wdzl.entity.User"> 
    <constructor-arg name= "name"value="mhy"> 
</bean> 
```

总结：在配置文件加载的时候，容器中管理的对象就已经初始化了！

# 4.Spring配置说明

## 4.1、别名

```xml
<!--别名，如果添加了别名，我们也可以使用别名获取到这个对象-->
<alias name ="user" alias="userNew">
```

## 4.2、Bean的配置

```xml
<!--    id : bean 的唯一标识符，也就是相当于我们学的对象名     
		class:bean 对象所对应的权限定名：包名 + 类型     
		name : 也是别名，而且name可以同时取多个别名-->
<bean id = ""  class=""   name=""> </bean>
```

## 4.3、import

这个import，一般用于团队开发使用，它可以将多个配置文件，导入合并为一个

假设，想在项目中有多个人在开发使用，这三个人负责不同的类开发，不同的类需要注册在不容的bean中，我们可以利用import将所有人的beans.xml合并为一个总的！

- 张三
- 李四
- 王五
- applicationContext.xml

```xml
<import resource = "beans.xml">    
<import resource = "beans1.xml">        
<import resource = "beans2.xml">
```

使用的时候，直接使用总的配置就可以了

# 5、依赖注入

## 5.1、构造器注入

就是前面的方法

## 5.2、Set方式注入（***重点）

- 依赖注入：Set注入！

  - 依赖：bean对象的创建依赖于容器

  - 注入：bean对象中的所有属性，由容器来注入

    【环境搭建】

    1. 复杂类型

```java
public class Address {
    private String address;
    public String getAddress() {
        return address;
    }
    public void setAddress(String address) {
        this.address = address;
    }
}
```


2. 真实测试对象

 ```java
public class Student {
    	private String name;
    	private Address address;
    	private String[] books;
    	private List<String> hobbys;
    	private Map<String, String> card;
    	private Set<String> games;
    	private String wife;
    	private Properties info;
    	
    	public String getName() {
    	    return name;
    	}
    	public void setName(String name) {
    	    this.name = name;
    	}
    	public Address getAddress() {
    	    return address;
    	}
    	public void setAddress(Address address) {
    	    this.address = address;
    	}
    	public String[] getBooks() {
    	    return books;
    	}
    	public void setBooks(String[] books) {
    	    this.books = books;
    	}
    	public List<String> getHobbys() {
    	    return hobbys;
    	}
    	public void setHobbys(List<String> hobbys) {
    	    this.hobbys = hobbys;
    	}
    	public Map<String, String> getCard() {
    	    return card;
    	}
    	public void setCard(Map<String, String> card) {
    	    this.card = card;
    	}
    	public Set<String> getGames() {
    	    return games;
    	}
    	public void setGames(Set<String> games) {
    	    this.games = games;
    	}
    	public String getWife() {
    	    return wife;
    	}
    	public void setWife(String wife) {
    	    this.wife = wife;
    	}
    	public Properties getInfo() {
    	    return info;
    	}
    	public void setInfo(Properties info) {
    	    this.info = info;
    	}
}
 ```

3.beans.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
  <bean id = "student" class="org.wdzl.pojo.Student">
      <!--第一种，普通值注入，value-->
      <property name="name" value="mhy"/>
  </bean>
</beans>
```

4.完善注入信息

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id = "address" class="org.wdzl.pojo.Address">
    <property name="address" value="武汉"/>
    </bean>>


    <bean id = "student" class="org.wdzl.pojo.Student">
      <!--第一种，普通值注入，value-->
      <property name="name" value="mhy"/>

      <!--第二种，bean注入，ref-->
      <property name="address" ref="address"/>

      <!--数组注入，ref-->
      <property name="books">
          <array>
              <value>红楼梦</value>
              <value>西游记</value>
              <value>水浒传</value>
              <value>三国演义</value>
          </array>
      </property>

      <!--list-->
      <property name="hobbys">
          <list>
              <value>听歌</value>
              <value>敲代码</value>
              <value>看电视</value>
          </list>
      </property>

      <!--Map-->
      <property name="card" >
          <map>
              <entry key="身份证" value="3165165656465156"></entry>
              <entry key="银行卡" value="36456565498498"></entry>
          </map>
      </property>

      <!--set-->
      <property name="games">
          <set>
              <value>LOL</value>
              <value>COC</value>
              <value>Dota</value>
          </set>
      </property>

       <!--null-->
        <property name="wife">
            <null/>
        </property>

        <!--Properties-->
        <property name="info">
            <props>
                <!--<prop key="学号">03175050</prop>
                <prop key="性别">男</prop>
                <prop key="姓名">小明</prop>-->
                <prop key="driver">03175050</prop>
                <prop key="url">男</prop>
                <prop key="username">小明</prop>
                <prop key="password">123456</prop>

            </props>
        </property>
  </bean>
</beans>
```

标签的属性：

name：用于指定注入时所调用的bean中的set方法名称

value：用于提供基本类型和String类型的数据

ref：用于指定其他的bean的类型，它指的是在Spring的IOC核心容器中出现的bean对象

优势：创建对象是没有明确的限制，可以直接使用默认的构造方法

弊端：如果某个对象中的成员必须有值，则获取对象时必须有set方法注入才可以。

 ### 方法二：通过有参方法进行属性值注入

使用的标签：

```xml
<constructor-arg>
```

出现的位置：bean标签的子标签

标签中的属性：

type:用于指定要注入的数据类型，代表构造方法中某个参数的类型

index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值，索引位置是从0开始

name：用于指定给构造函数中指定名称的参数赋值（常用方式）

value：⽤于提供基本类型和String类型的数据

ref：⽤于指定其他bean类型数据，他指的是在springIOC核⼼容器中出现的bean对象

优势：获取bean对象时，注⼊数据是必须的操作，否则对象⽆法创建

劣势：改变 了bean对象的实例⽅式，使我们创建对象时，如果⽤不到这些数据，也必须提供。

```xml
<?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://www.springframework.org/schema/beans
            https://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- 第一种方式  下标赋值-->
    	<bean id="user" class="hao.pojo.User">
        	<constructor-arg index="0" value="mhy"/>
        </bean>
    
    
    <!--  第二种方式   通过类型创建  不建议使用-->
        <bean id="user" class="hao.pojo.User">-->
            <constructor-arg type="java.lang.String" value="mhy"/>
        </bean>
    
    <!--    第三种方式 直接通过参数名设置-->
        <bean id="user" class="hao.pojo.User">
            <constructor-arg name="name" value="学习"/>
        </bean>
        <bean id="userT" class="hao.pojo.UserT">
        </bean>
        <!--
         alias 别名   但是区分大小写
         bean
         id ： bean 的唯一标识符 也就是相当于我们学的对象名
         class： bean 对象所对应的全限定名  ：  包名+类型
         name： 也就是别名 而且name 可以同时取多个别名
         import一般用于团队开发使用，它可以将多个配置文件 导入合并为一个
         -->
</beans>
    ```

## 5.3、拓展方式注入

我们可以使用p命令和C命令进行注入(p:property，c:constructior)

## 5.4、bean的作用域

1. 单例模式（Spring默认机制）

```xml
<bean id="user2" class="org.wdzl.pojo.User" c:name="mhy" c:age="18" scope="singleton"/>
```

1. 原型模式：每次从容器中get的时候，都会产生一个新对象

```xml
<bean id="user2" class="org.wdzl.pojo.User" c:name="mhy" c:age="18" scope="prototype"/>
```

1. 其余的request，session，application，这些只能在web开发中使用到

    

# 6、bean的自动装配

- 自动装配是spring满足bean依赖的一种方式！
- Spring会在上下文中自动寻找，并自动给bean装配属性

 

在Spring中有三种装配的方式

1. 在xml中显示的配置
2. 在Java中显示配置
3. 隐式的自动装配bean【重要的东西】

## 6.1 测试

1. 环境搭建：一个人有两个宠物

 

## 6.2 ByName自动装配

```xml
 <!--
   byName:会自动在容器上下文中查找，和自己对象set方法后面的值对应的bean id~
   -->
    <bean id="people" class="org.wdzl.pojo.People" autowire="byName">
        <property name="name" value="神啊"/>
		<!--<property name="cat" ref="cat"/>
        <property name="dog" ref="dog"/>-->
    </bean>
```

## 6.3 ByType自动装配

```xml
<bean class="org.wdzl.pojo.Cat"/>
      <bean class="org.wdzl.pojo.Dog"/>

   <!--
   byName:会自动在容器上下文中查找，和自己对象set方法后面的值对应的bean id~
   byType:会自动在容器上下文中查找，和自己对象属性类型相同的对应的bean
   -->
    <bean id="people" class="org.wdzl.pojo.People" autowire="byType">
        <property name="name" value="神啊"/>
<!--        <property name="cat" ref="cat"/>
        <property name="dog" ref="dog"/>-->

    </bean>
```

小结：

- **byname的时候，需要保证所有的bean唯一，并且这个bean需要和自动注入的属性的set的值一致**
- **不要type的时候，需要保证所有的bean的class唯一，并且这个bean需要和自动注入的属性的类型一致**(String), https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1640451212,3045819206&fm=26&gp=0.jpg(String), Spring是一个开源的免费的框架（容器）！ Spring是一个轻量级的、非入侵式的框架！控制反转（IOC）、面向切面编程（AOP）支持事务的处理，对框架整合的支持！(String), 原创(String), 1(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean), true(Boolean), 2020-11-08 10:56:01.774(Timestamp), 2020-11-08 10:59:09.925(Timestamp), 74(Long), 2(Long), 74(Long)
2020-11-08 10:59:09.935 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.personal_blog.dao.BlogMapper.update  : <==    Updates: 1
2020-11-08 10:59:09.936 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogTagsMapper.delete          : ==>  Preparing: delete from t_blog_tags where blogs_id = ?
2020-11-08 10:59:09.936 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogTagsMapper.delete          : ==> Parameters: 74(Long)
2020-11-08 10:59:09.943 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogTagsMapper.delete          : <==    Updates: 2
2020-11-08 10:59:09.943 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogTagsMapper.insertBlogTag   : ==>  Preparing: insert into t_blog_tags(blogs_id,tags_id) values (?,?);
2020-11-08 10:59:09.944 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogTagsMapper.insertBlogTag   : ==> Parameters: 74(Long), 50(Long)
2020-11-08 10:59:09.946 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogTagsMapper.insertBlogTag   : <==    Updates: 1
2020-11-08 10:59:09.947 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogTagsMapper.insertBlogTag   : ==>  Preparing: insert into t_blog_tags(blogs_id,tags_id) values (?,?);
2020-11-08 10:59:09.948 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogTagsMapper.insertBlogTag   : ==> Parameters: 74(Long), 57(Long)
2020-11-08 10:59:09.952 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogTagsMapper.insertBlogTag   : <==    Updates: 1
2020-11-08 10:59:09.959  INFO 4252 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: redirect:/admin/blogs
2020-11-08 10:59:09.968  INFO 4252 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/blogs', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.BlogController.showBlog', args参数：[{success=修改成功！}, 1]}
2020-11-08 10:59:09.970 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id
2020-11-08 10:59:09.971 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : ==> Parameters: 
2020-11-08 10:59:09.974 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getAllBlog_COUNT    : <==      Total: 1
2020-11-08 10:59:09.977 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getAllBlog          : ==>  Preparing: SELECT b.id, b.title, b.update_time, b.recommend, b.type_id, b.published, b.commentabled, b.share_statement, t.id typeid, t.name typename FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id order by update_time desc LIMIT ?
2020-11-08 10:59:09.977 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getAllBlog          : ==> Parameters: 5(Integer)
2020-11-08 10:59:09.982 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.getAllBlog          : <==      Total: 5
2020-11-08 10:59:09.983 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: select id,name from blog.t_type;
2020-11-08 10:59:09.983 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 
2020-11-08 10:59:09.985 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 14
2020-11-08 10:59:09.986  INFO 4252 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/blogs
2020-11-08 10:59:14.661  INFO 4252 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.index', args参数：[1, {}]}
2020-11-08 10:59:14.675 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll_COUNT       : ==>  Preparing: SELECT count(0) FROM (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published
2020-11-08 10:59:14.677 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll_COUNT       : ==> Parameters: 
2020-11-08 10:59:14.680 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll_COUNT       : <==      Total: 1
2020-11-08 10:59:14.682 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll             : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published order by b.update_time desc LIMIT ?
2020-11-08 10:59:14.683 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll             : ==> Parameters: 5(Integer)
2020-11-08 10:59:14.706 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll             : <==      Total: 5
2020-11-08 10:59:14.710 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.getIndexType        : ==>  Preparing: select b.id bid, b.title, b.type_id, t.id tid, t.name from t_type t inner join t_blog b on t.id = b.type_id
2020-11-08 10:59:14.712 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.getIndexType        : ==> Parameters: 
2020-11-08 10:59:14.721 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.getIndexType        : <==      Total: 6
2020-11-08 10:59:14.722 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.TagMapper.getIndexTag          : ==>  Preparing: SELECT t.id tid,t.name, b.id bid FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id
2020-11-08 10:59:14.723 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.TagMapper.getIndexTag          : ==> Parameters: 
2020-11-08 10:59:14.727 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.TagMapper.getIndexTag          : <==      Total: 10
2020-11-08 10:59:14.728 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findRecommendBlogs  : ==>  Preparing: select b.id, b.title, b.update_time from t_blog b where b.published and b.commentabled order by update_time desc limit 5
2020-11-08 10:59:14.729 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findRecommendBlogs  : ==> Parameters: 
2020-11-08 10:59:14.731 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findRecommendBlogs  : <==      Total: 5
2020-11-08 10:59:14.732  INFO 4252 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: index
2020-11-08 10:59:15.145  INFO 4252 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 10:59:15.146 DEBUG 4252 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 10:59:15.146 DEBUG 4252 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 10:59:15.147 DEBUG 4252 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 10:59:15.148  INFO 4252 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 11:09:44.829  INFO 4252 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/types/-1', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.TypeShowController.show', args参数：[-1, {}, 1]}
2020-11-08 11:09:44.841 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.TypeMapper.getIndexType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_type t INNER JOIN t_blog b ON t.id = b.type_id
2020-11-08 11:09:44.842 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.TypeMapper.getIndexType_COUNT  : ==> Parameters: 
2020-11-08 11:09:44.844 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.TypeMapper.getIndexType_COUNT  : <==      Total: 1
2020-11-08 11:09:44.845 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.TypeMapper.getIndexType        : ==>  Preparing: select b.id bid, b.title, b.type_id, t.id tid, t.name from t_type t inner join t_blog b on t.id = b.type_id LIMIT ?
2020-11-08 11:09:44.846 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.TypeMapper.getIndexType        : ==> Parameters: 100(Integer)
2020-11-08 11:09:44.848 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.TypeMapper.getIndexType        : <==      Total: 6
2020-11-08 11:09:44.855 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.d.B.findAllByTypeId_COUNT          : ==>  Preparing: SELECT count(0) FROM (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published AND b.type_id = ?
2020-11-08 11:09:44.856 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.d.B.findAllByTypeId_COUNT          : ==> Parameters: 81(Long)
2020-11-08 11:09:44.858 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.d.B.findAllByTypeId_COUNT          : <==      Total: 1
2020-11-08 11:09:44.859 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.findAllByTypeId     : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published and b.type_id = ? order by b.update_time desc LIMIT ?
2020-11-08 11:09:44.860 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.findAllByTypeId     : ==> Parameters: 81(Long), 5(Integer)
2020-11-08 11:09:44.863 DEBUG 4252 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.findAllByTypeId     : <==      Total: 1
2020-11-08 11:09:44.863  INFO 4252 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: type
2020-11-08 11:09:45.340  INFO 4252 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 11:09:45.341 DEBUG 4252 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 11:09:45.341 DEBUG 4252 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 11:09:45.342 DEBUG 4252 --- [http-nio-8080-exec-6] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 11:09:45.343  INFO 4252 --- [http-nio-8080-exec-6] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 11:09:45.985  INFO 4252 --- [http-nio-8080-exec-8] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/tags/-1', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.TagShowController.show', args参数：[-1, {}, 1]}
2020-11-08 11:09:46.005 DEBUG 4252 --- [http-nio-8080-exec-8] c.s.p.dao.TagMapper.getIndexTag_COUNT    : ==>  Preparing: SELECT count(0) FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id
2020-11-08 11:09:46.006 DEBUG 4252 --- [http-nio-8080-exec-8] c.s.p.dao.TagMapper.getIndexTag_COUNT    : ==> Parameters: 
2020-11-08 11:09:46.011 DEBUG 4252 --- [http-nio-8080-exec-8] c.s.p.dao.TagMapper.getIndexTag_COUNT    : <==      Total: 1
2020-11-08 11:09:46.013 DEBUG 4252 --- [http-nio-8080-exec-8] c.s.p.dao.TagMapper.getIndexTag          : ==>  Preparing: SELECT t.id tid,t.name, b.id bid FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id LIMIT ?
2020-11-08 11:09:46.014 DEBUG 4252 --- [http-nio-8080-exec-8] c.s.p.dao.TagMapper.getIndexTag          : ==> Parameters: 100(Integer)
2020-11-08 11:09:46.026 DEBUG 4252 --- [http-nio-8080-exec-8] c.s.p.dao.TagMapper.getIndexTag          : <==      Total: 10
2020-11-08 11:09:46.040 DEBUG 4252 --- [http-nio-8080-exec-8] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type ty, t_user u, t_blog_tags bt, t_tag ta WHERE b.published AND b.user_id = u.id AND b.type_id = ty.id AND b.id = bt.blogs_id AND bt.tags_id = ta.id AND ta.id = ?
2020-11-08 11:09:46.043 DEBUG 4252 --- [http-nio-8080-exec-8] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : ==> Parameters: 54(Long)
2020-11-08 11:09:46.048 DEBUG 4252 --- [http-nio-8080-exec-8] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : <==      Total: 1
2020-11-08 11:09:46.050 DEBUG 4252 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.findAllByTagId      : ==>  Preparing: SELECT b.id, b.title, b.first_picture, b.views, b.update_time, b.description, ty.name, u.nickname, u.avatar FROM t_blog b, t_type ty, t_user u, t_blog_tags bt, t_tag ta WHERE b.published and b.user_id = u.id and b.type_id = ty.id and b.id = bt.blogs_id and bt.tags_id = ta.id and ta.id = ? ORDER BY b.update_time desc LIMIT ?
2020-11-08 11:09:46.052 DEBUG 4252 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.findAllByTagId      : ==> Parameters: 54(Long), 5(Integer)
2020-11-08 11:09:46.061 DEBUG 4252 --- [http-nio-8080-exec-8] c.s.p.dao.BlogMapper.findAllByTagId      : <==      Total: 1
2020-11-08 11:09:46.062  INFO 4252 --- [http-nio-8080-exec-8] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: tag
2020-11-08 11:09:46.474  INFO 4252 --- [http-nio-8080-exec-9] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 11:09:46.475 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 11:09:46.475 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 11:09:46.476 DEBUG 4252 --- [http-nio-8080-exec-9] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 11:09:46.476  INFO 4252 --- [http-nio-8080-exec-9] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 11:09:48.263  INFO 4252 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/archives', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.ArchiveShowController.archives', args参数：[{}]}
2020-11-08 11:09:48.275 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findGroupYear       : ==>  Preparing: select DATE_FORMAT(b.create_time, '%Y') from t_blog b where b.published order by b.create_time
2020-11-08 11:09:48.276 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findGroupYear       : ==> Parameters: 
2020-11-08 11:09:48.289 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findGroupYear       : <==      Total: 6
2020-11-08 11:09:48.297 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findByYear          : ==>  Preparing: select b.title, b.create_time, b.id, b.flag from t_blog b where b.published and DATE_FORMAT(b.create_time, "%Y") = ? order by b.create_time
2020-11-08 11:09:48.299 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findByYear          : ==> Parameters: 2020(String)
2020-11-08 11:09:48.309 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findByYear          : <==      Total: 6
2020-11-08 11:09:48.312 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll             : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published order by b.update_time desc
2020-11-08 11:09:48.314 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll             : ==> Parameters: 
2020-11-08 11:09:48.337 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAll             : <==      Total: 6
2020-11-08 11:09:48.338  INFO 4252 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: archives
2020-11-08 11:09:48.746  INFO 4252 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 11:09:48.748 DEBUG 4252 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 11:09:48.749 DEBUG 4252 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 11:09:48.750 DEBUG 4252 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 11:09:48.751  INFO 4252 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 11:09:49.983  INFO 4252 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/tags/-1', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.TagShowController.show', args参数：[-1, {}, 1]}
2020-11-08 11:09:49.991 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.TagMapper.getIndexTag_COUNT    : ==>  Preparing: SELECT count(0) FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id
2020-11-08 11:09:49.992 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.TagMapper.getIndexTag_COUNT    : ==> Parameters: 
2020-11-08 11:09:49.996 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.TagMapper.getIndexTag_COUNT    : <==      Total: 1
2020-11-08 11:09:49.998 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.TagMapper.getIndexTag          : ==>  Preparing: SELECT t.id tid,t.name, b.id bid FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id LIMIT ?
2020-11-08 11:09:50.000 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.TagMapper.getIndexTag          : ==> Parameters: 100(Integer)
2020-11-08 11:09:50.007 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.TagMapper.getIndexTag          : <==      Total: 10
2020-11-08 11:09:50.019 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type ty, t_user u, t_blog_tags bt, t_tag ta WHERE b.published AND b.user_id = u.id AND b.type_id = ty.id AND b.id = bt.blogs_id AND bt.tags_id = ta.id AND ta.id = ?
2020-11-08 11:09:50.020 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : ==> Parameters: 54(Long)
2020-11-08 11:09:50.024 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : <==      Total: 1
2020-11-08 11:09:50.026 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findAllByTagId      : ==>  Preparing: SELECT b.id, b.title, b.first_picture, b.views, b.update_time, b.description, ty.name, u.nickname, u.avatar FROM t_blog b, t_type ty, t_user u, t_blog_tags bt, t_tag ta WHERE b.published and b.user_id = u.id and b.type_id = ty.id and b.id = bt.blogs_id and bt.tags_id = ta.id and ta.id = ? ORDER BY b.update_time desc LIMIT ?
2020-11-08 11:09:50.027 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findAllByTagId      : ==> Parameters: 54(Long), 5(Integer)
2020-11-08 11:09:50.036 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findAllByTagId      : <==      Total: 1
2020-11-08 11:09:50.038  INFO 4252 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: tag
2020-11-08 11:09:50.421  INFO 4252 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 11:09:50.422 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 11:09:50.422 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 11:09:50.423 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 11:09:50.423  INFO 4252 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 11:09:52.340  INFO 4252 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.index', args参数：[1, {}]}
2020-11-08 11:09:52.350 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findAll_COUNT       : ==>  Preparing: SELECT count(0) FROM (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published
2020-11-08 11:09:52.353 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findAll_COUNT       : ==> Parameters: 
2020-11-08 11:09:52.357 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findAll_COUNT       : <==      Total: 1
2020-11-08 11:09:52.359 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findAll             : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published order by b.update_time desc LIMIT ?
2020-11-08 11:09:52.360 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findAll             : ==> Parameters: 5(Integer)
2020-11-08 11:09:52.370 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findAll             : <==      Total: 5
2020-11-08 11:09:52.372 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.getIndexType        : ==>  Preparing: select b.id bid, b.title, b.type_id, t.id tid, t.name from t_type t inner join t_blog b on t.id = b.type_id
2020-11-08 11:09:52.373 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.getIndexType        : ==> Parameters: 
2020-11-08 11:09:52.381 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.TypeMapper.getIndexType        : <==      Total: 6
2020-11-08 11:09:52.386 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.TagMapper.getIndexTag          : ==>  Preparing: SELECT t.id tid,t.name, b.id bid FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id
2020-11-08 11:09:52.387 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.TagMapper.getIndexTag          : ==> Parameters: 
2020-11-08 11:09:52.398 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.TagMapper.getIndexTag          : <==      Total: 10
2020-11-08 11:09:52.401 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findRecommendBlogs  : ==>  Preparing: select b.id, b.title, b.update_time from t_blog b where b.published and b.commentabled order by update_time desc limit 5
2020-11-08 11:09:52.402 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findRecommendBlogs  : ==> Parameters: 
2020-11-08 11:09:52.406 DEBUG 4252 --- [http-nio-8080-exec-7] c.s.p.dao.BlogMapper.findRecommendBlogs  : <==      Total: 5
2020-11-08 11:09:52.407  INFO 4252 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: index
2020-11-08 11:09:52.839  INFO 4252 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 11:09:52.840 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 11:09:52.840 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 11:09:52.841 DEBUG 4252 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 11:09:52.841  INFO 4252 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 11:11:00.625  INFO 4252 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/types/-1', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.TypeShowController.show', args参数：[-1, {}, 1]}
2020-11-08 11:11:00.630 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.getIndexType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_type t INNER JOIN t_blog b ON t.id = b.type_id
2020-11-08 11:11:00.631 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.getIndexType_COUNT  : ==> Parameters: 
2020-11-08 11:11:00.632 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.getIndexType_COUNT  : <==      Total: 1
2020-11-08 11:11:00.634 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.getIndexType        : ==>  Preparing: select b.id bid, b.title, b.type_id, t.id tid, t.name from t_type t inner join t_blog b on t.id = b.type_id LIMIT ?
2020-11-08 11:11:00.634 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.getIndexType        : ==> Parameters: 100(Integer)
2020-11-08 11:11:00.636 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.TypeMapper.getIndexType        : <==      Total: 6
2020-11-08 11:11:00.639 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.d.B.findAllByTypeId_COUNT          : ==>  Preparing: SELECT count(0) FROM (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published AND b.type_id = ?
2020-11-08 11:11:00.639 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.d.B.findAllByTypeId_COUNT          : ==> Parameters: 81(Long)
2020-11-08 11:11:00.640 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.d.B.findAllByTypeId_COUNT          : <==      Total: 1
2020-11-08 11:11:00.641 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAllByTypeId     : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published and b.type_id = ? order by b.update_time desc LIMIT ?
2020-11-08 11:11:00.642 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAllByTypeId     : ==> Parameters: 81(Long), 5(Integer)
2020-11-08 11:11:00.644 DEBUG 4252 --- [http-nio-8080-exec-2] c.s.p.dao.BlogMapper.findAllByTypeId     : <==      Total: 1
2020-11-08 11:11:00.644  INFO 4252 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: type
2020-11-08 11:11:01.214  INFO 4252 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 11:11:01.215 DEBUG 4252 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 11:11:01.215 DEBUG 4252 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 11:11:01.217 DEBUG 4252 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 11:11:01.217  INFO 4252 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 11:11:02.176  INFO 4252 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/tags/-1', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.TagShowController.show', args参数：[-1, {}, 1]}
2020-11-08 11:11:02.184 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.TagMapper.getIndexTag_COUNT    : ==>  Preparing: SELECT count(0) FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id
2020-11-08 11:11:02.185 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.TagMapper.getIndexTag_COUNT    : ==> Parameters: 
2020-11-08 11:11:02.189 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.TagMapper.getIndexTag_COUNT    : <==      Total: 1
2020-11-08 11:11:02.191 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.TagMapper.getIndexTag          : ==>  Preparing: SELECT t.id tid,t.name, b.id bid FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id LIMIT ?
2020-11-08 11:11:02.192 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.TagMapper.getIndexTag          : ==> Parameters: 100(Integer)
2020-11-08 11:11:02.199 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.TagMapper.getIndexTag          : <==      Total: 10
2020-11-08 11:11:02.207 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type ty, t_user u, t_blog_tags bt, t_tag ta WHERE b.published AND b.user_id = u.id AND b.type_id = ty.id AND b.id = bt.blogs_id AND bt.tags_id = ta.id AND ta.id = ?
2020-11-08 11:11:02.208 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : ==> Parameters: 54(Long)
2020-11-08 11:11:02.212 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : <==      Total: 1
2020-11-08 11:11:02.214 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findAllByTagId      : ==>  Preparing: SELECT b.id, b.title, b.first_picture, b.views, b.update_time, b.description, ty.name, u.nickname, u.avatar FROM t_blog b, t_type ty, t_user u, t_blog_tags bt, t_tag ta WHERE b.published and b.user_id = u.id and b.type_id = ty.id and b.id = bt.blogs_id and bt.tags_id = ta.id and ta.id = ? ORDER BY b.update_time desc LIMIT ?
2020-11-08 11:11:02.215 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findAllByTagId      : ==> Parameters: 54(Long), 5(Integer)
2020-11-08 11:11:02.220 DEBUG 4252 --- [http-nio-8080-exec-3] c.s.p.dao.BlogMapper.findAllByTagId      : <==      Total: 1
2020-11-08 11:11:02.221  INFO 4252 --- [http-nio-8080-exec-3] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: tag
2020-11-08 11:11:02.632  INFO 4252 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 11:11:02.633 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 11:11:02.633 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 11:11:02.634 DEBUG 4252 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 11:11:02.634  INFO 4252 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 14:41:15.408  INFO 8364 --- [main] c.s.p.PersonalBlogApplication            : Starting PersonalBlogApplication on m with PID 8364 (D:\myblog-mybatis\target\classes started by 　　　 in D:\myblog-mybatis)
2020-11-08 14:41:15.420 DEBUG 8364 --- [main] c.s.p.PersonalBlogApplication            : Running with Spring Boot v2.3.4.RELEASE, Spring v5.2.9.RELEASE
2020-11-08 14:41:15.421  INFO 8364 --- [main] c.s.p.PersonalBlogApplication            : No active profile set, falling back to default profiles: default
2020-11-08 14:41:18.926  INFO 8364 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-11-08 14:41:18.939  INFO 8364 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-11-08 14:41:18.939  INFO 8364 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.38]
2020-11-08 14:41:19.100  INFO 8364 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-11-08 14:41:19.101  INFO 8364 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 3520 ms
2020-11-08 14:41:20.279  INFO 8364 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-11-08 14:41:20.611  INFO 8364 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-11-08 14:41:21.089  INFO 8364 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-11-08 14:41:21.100  INFO 8364 --- [main] c.s.p.PersonalBlogApplication            : Started PersonalBlogApplication in 7.045 seconds (JVM running for 9.046)
2020-11-08 14:41:26.566  INFO 8364 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-11-08 14:41:26.568  INFO 8364 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-11-08 14:41:26.594  INFO 8364 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 26 ms
2020-11-08 14:41:26.689  INFO 8364 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.index', args参数：[1, {}]}
2020-11-08 14:41:26.735  INFO 8364 --- [http-nio-8080-exec-1] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-11-08 14:41:38.028 ERROR 8364 --- [http-nio-8080-exec-1] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Exception during pool initialization.

java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:906) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:831) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:456) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:246) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:197) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:358) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:477) [HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:560) [HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115) [HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112) [HikariCP-3.4.5.jar:na]
	at com.github.pagehelper.page.PageAutoDialect.getUrl(PageAutoDialect.java:177) [pagehelper-5.1.10.jar:na]
	at com.github.pagehelper.page.PageAutoDialect.getDialect(PageAutoDialect.java:203) [pagehelper-5.1.10.jar:na]
	at com.github.pagehelper.page.PageAutoDialect.initDelegateDialect(PageAutoDialect.java:99) [pagehelper-5.1.10.jar:na]
	at com.github.pagehelper.PageHelper.skip(PageHelper.java:66) [pagehelper-5.1.10.jar:na]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:93) [pagehelper-5.1.10.jar:na]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) [mybatis-3.5.5.jar:3.5.5]
	at com.sun.proxy.$Proxy97.query(Unknown Source) [na:na]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) [mybatis-3.5.5.jar:3.5.5]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) [mybatis-3.5.5.jar:3.5.5]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) [mybatis-spring-2.0.5.jar:2.0.5]
	at com.sun.proxy.$Proxy68.selectList(Unknown Source) [na:na]
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223) [mybatis-spring-2.0.5.jar:2.0.5]
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147) [mybatis-3.5.5.jar:3.5.5]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80) [mybatis-3.5.5.jar:3.5.5]
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:152) [mybatis-3.5.5.jar:3.5.5]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85) [mybatis-3.5.5.jar:3.5.5]
	at com.sun.proxy.$Proxy71.findAll(Unknown Source) [na:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139) [spring-tx-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at com.sun.proxy.$Proxy72.findAll(Unknown Source) [na:na]
	at com.simplem.personal_blog.service.impl.BlogServiceImpl.getIndexBlog(BlogServiceImpl.java:51) [classes/:na]
	at com.simplem.personal_blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$bc7ca80b.invoke(<generated>) [classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) [spring-core-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at com.simplem.personal_blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$1254be40.getIndexBlog(<generated>) [classes/:na]
	at com.simplem.personal_blog.controller.IndexController.index(IndexController.java:48) [classes/:na]
	at com.simplem.personal_blog.controller.IndexController$$FastClassBySpringCGLIB$$20f98fc9.invoke(<generated>) [classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) [spring-core-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691) [spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at com.simplem.personal_blog.controller.IndexController$$EnhancerBySpringCGLIB$$269a881d.index(<generated>) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626) [tomcat-embed-core-9.0.38.jar:4.0.FR]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733) [tomcat-embed-core-9.0.38.jar:4.0.FR]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: com.mysql.cj.exceptions.CJCommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_181]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_181]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:91) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.NativeSession.connect(NativeSession.java:144) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:850) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	... 115 common frames omitted
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method) ~[na:1.8.0_181]
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85) ~[na:1.8.0_181]
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350) ~[na:1.8.0_181]
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206) ~[na:1.8.0_181]
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188) ~[na:1.8.0_181]
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172) ~[na:1.8.0_181]
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392) ~[na:1.8.0_181]
	at java.net.Socket.connect(Socket.java:589) ~[na:1.8.0_181]
	at com.mysql.cj.protocol.StandardSocketFactory.connect(StandardSocketFactory.java:155) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:65) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	... 117 common frames omitted

2020-11-08 14:41:38.087 ERROR 8364 --- [http-nio-8080-exec-1] c.s.p.h.ControllerExceptionHandler       : Request URL : http://localhost:8080/,Exception e : {}

org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: com.github.pagehelper.PageException: java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
### Cause: com.github.pagehelper.PageException: java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92) ~[mybatis-spring-2.0.5.jar:2.0.5]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440) ~[mybatis-spring-2.0.5.jar:2.0.5]
	at com.sun.proxy.$Proxy68.selectList(Unknown Source) ~[na:na]
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223) ~[mybatis-spring-2.0.5.jar:2.0.5]
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147) ~[mybatis-3.5.5.jar:3.5.5]
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80) ~[mybatis-3.5.5.jar:3.5.5]
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:152) ~[mybatis-3.5.5.jar:3.5.5]
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85) ~[mybatis-3.5.5.jar:3.5.5]
	at com.sun.proxy.$Proxy71.findAll(Unknown Source) ~[na:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139) ~[spring-tx-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at com.sun.proxy.$Proxy72.findAll(Unknown Source) ~[na:na]
	at com.simplem.personal_blog.service.impl.BlogServiceImpl.getIndexBlog(BlogServiceImpl.java:51) ~[classes/:na]
	at com.simplem.personal_blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$bc7ca80b.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:687) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at com.simplem.personal_blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$1254be40.getIndexBlog(<generated>) ~[classes/:na]
	at com.simplem.personal_blog.controller.IndexController.index(IndexController.java:48) ~[classes/:na]
	at com.simplem.personal_blog.controller.IndexController$$FastClassBySpringCGLIB$$20f98fc9.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691) ~[spring-aop-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at com.simplem.personal_blog.controller.IndexController$$EnhancerBySpringCGLIB$$269a881d.index(<generated>) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105) ~[spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878) ~[spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792) ~[spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626) [tomcat-embed-core-9.0.38.jar:4.0.FR]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733) [tomcat-embed-core-9.0.38.jar:4.0.FR]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.38.jar:9.0.38]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: com.github.pagehelper.PageException: java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
### Cause: com.github.pagehelper.PageException: java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30) ~[mybatis-3.5.5.jar:3.5.5]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:149) ~[mybatis-3.5.5.jar:3.5.5]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) ~[mybatis-3.5.5.jar:3.5.5]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ~[mybatis-spring-2.0.5.jar:2.0.5]
	... 90 common frames omitted
Caused by: com.github.pagehelper.PageException: java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at com.github.pagehelper.page.PageAutoDialect.getUrl(PageAutoDialect.java:180) ~[pagehelper-5.1.10.jar:na]
	at com.github.pagehelper.page.PageAutoDialect.getDialect(PageAutoDialect.java:203) ~[pagehelper-5.1.10.jar:na]
	at com.github.pagehelper.page.PageAutoDialect.initDelegateDialect(PageAutoDialect.java:99) ~[pagehelper-5.1.10.jar:na]
	at com.github.pagehelper.PageHelper.skip(PageHelper.java:66) ~[pagehelper-5.1.10.jar:na]
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:93) ~[pagehelper-5.1.10.jar:na]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.5.jar:3.5.5]
	at com.sun.proxy.$Proxy97.query(Unknown Source) ~[na:na]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.5.jar:3.5.5]
	... 96 common frames omitted
Caused by: java.sql.SQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:906) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:831) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:456) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:246) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:197) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:358) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:477) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:560) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112) ~[HikariCP-3.4.5.jar:na]
	at com.github.pagehelper.page.PageAutoDialect.getUrl(PageAutoDialect.java:177) ~[pagehelper-5.1.10.jar:na]
	... 103 common frames omitted
Caused by: com.mysql.cj.exceptions.CJCommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_181]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_181]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:91) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.NativeSession.connect(NativeSession.java:144) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:850) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	... 115 common frames omitted
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method) ~[na:1.8.0_181]
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85) ~[na:1.8.0_181]
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350) ~[na:1.8.0_181]
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206) ~[na:1.8.0_181]
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188) ~[na:1.8.0_181]
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172) ~[na:1.8.0_181]
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392) ~[na:1.8.0_181]
	at java.net.Socket.connect(Socket.java:589) ~[na:1.8.0_181]
	at com.mysql.cj.protocol.StandardSocketFactory.connect(StandardSocketFactory.java:155) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:65) ~[mysql-connector-java-8.0.21.jar:8.0.21]
	... 117 common frames omitted

2020-11-08 14:41:57.803  INFO 8364 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.index', args参数：[1, {}]}
2020-11-08 14:41:57.807  INFO 8364 --- [http-nio-8080-exec-10] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-11-08 14:41:58.019  INFO 8364 --- [http-nio-8080-exec-10] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-11-08 14:41:58.095 DEBUG 8364 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.findAll_COUNT       : ==>  Preparing: SELECT count(0) FROM (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published
2020-11-08 14:41:58.129 DEBUG 8364 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.findAll_COUNT       : ==> Parameters: 
2020-11-08 14:41:58.179 DEBUG 8364 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.findAll_COUNT       : <==      Total: 1
2020-11-08 14:41:58.182 DEBUG 8364 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.findAll             : ==>  Preparing: select b.id, b.title, b.first_picture, b.views, b.update_time, b.description, t.name, u.nickname, u.avatar from (t_blog b INNER JOIN t_type t ON b.type_id = t.id) INNER JOIN t_user u ON b.user_id = u.id WHERE b.published order by b.update_time desc LIMIT ?
2020-11-08 14:41:58.183 DEBUG 8364 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.findAll             : ==> Parameters: 5(Integer)
2020-11-08 14:41:58.201 DEBUG 8364 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.findAll             : <==      Total: 5
2020-11-08 14:41:58.204 DEBUG 8364 --- [http-nio-8080-exec-10] c.s.p.dao.TypeMapper.getIndexType        : ==>  Preparing: select b.id bid, b.title, b.type_id, t.id tid, t.name from t_type t inner join t_blog b on t.id = b.type_id
2020-11-08 14:41:58.204 DEBUG 8364 --- [http-nio-8080-exec-10] c.s.p.dao.TypeMapper.getIndexType        : ==> Parameters: 
2020-11-08 14:41:58.207 DEBUG 8364 --- [http-nio-8080-exec-10] c.s.p.dao.TypeMapper.getIndexType        : <==      Total: 6
2020-11-08 14:41:58.213 DEBUG 8364 --- [http-nio-8080-exec-10] c.s.p.dao.TagMapper.getIndexTag          : ==>  Preparing: SELECT t.id tid,t.name, b.id bid FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id
2020-11-08 14:41:58.213 DEBUG 8364 --- [http-nio-8080-exec-10] c.s.p.dao.TagMapper.getIndexTag          : ==> Parameters: 
2020-11-08 14:41:58.220 DEBUG 8364 --- [http-nio-8080-exec-10] c.s.p.dao.TagMapper.getIndexTag          : <==      Total: 10
2020-11-08 14:41:58.221 DEBUG 8364 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.findRecommendBlogs  : ==>  Preparing: select b.id, b.title, b.update_time from t_blog b where b.published and b.commentabled order by update_time desc limit 5
2020-11-08 14:41:58.222 DEBUG 8364 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.findRecommendBlogs  : ==> Parameters: 
2020-11-08 14:41:58.226 DEBUG 8364 --- [http-nio-8080-exec-10] c.s.p.dao.BlogMapper.findRecommendBlogs  : <==      Total: 5
2020-11-08 14:41:58.227  INFO 8364 --- [http-nio-8080-exec-10] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: index
2020-11-08 14:41:58.809  INFO 8364 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 14:41:58.810 DEBUG 8364 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 14:41:58.810 DEBUG 8364 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 14:41:58.812 DEBUG 8364 --- [http-nio-8080-exec-4] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 14:41:58.812  INFO 8364 --- [http-nio-8080-exec-4] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 14:42:00.698  INFO 8364 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/tags/-1', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.TagShowController.show', args参数：[-1, {}, 1]}
2020-11-08 14:42:00.749 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.getIndexTag_COUNT    : ==>  Preparing: SELECT count(0) FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id
2020-11-08 14:42:00.750 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.getIndexTag_COUNT    : ==> Parameters: 
2020-11-08 14:42:00.752 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.getIndexTag_COUNT    : <==      Total: 1
2020-11-08 14:42:00.754 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.getIndexTag          : ==>  Preparing: SELECT t.id tid,t.name, b.id bid FROM (t_blog_tags bt INNER JOIN t_blog b ON bt.blogs_id = b.id) INNER JOIN t_tag t ON bt.tags_id = t.id LIMIT ?
2020-11-08 14:42:00.755 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.getIndexTag          : ==> Parameters: 100(Integer)
2020-11-08 14:42:00.763 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.dao.TagMapper.getIndexTag          : <==      Total: 10
2020-11-08 14:42:00.789 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b, t_type ty, t_user u, t_blog_tags bt, t_tag ta WHERE b.published AND b.user_id = u.id AND b.type_id = ty.id AND b.id = bt.blogs_id AND bt.tags_id = ta.id AND ta.id = ?
2020-11-08 14:42:00.790 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : ==> Parameters: 54(Long)
2020-11-08 14:42:00.868 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.d.BlogMapper.findAllByTagId_COUNT  : <==      Total: 1
2020-11-08 14:42:00.871 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findAllByTagId      : ==>  Preparing: SELECT b.id, b.title, b.first_picture, b.views, b.update_time, b.description, ty.name, u.nickname, u.avatar FROM t_blog b, t_type ty, t_user u, t_blog_tags bt, t_tag ta WHERE b.published and b.user_id = u.id and b.type_id = ty.id and b.id = bt.blogs_id and bt.tags_id = ta.id and ta.id = ? ORDER BY b.update_time desc LIMIT ?
2020-11-08 14:42:00.873 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findAllByTagId      : ==> Parameters: 54(Long), 5(Integer)
2020-11-08 14:42:00.883 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.dao.BlogMapper.findAllByTagId      : <==      Total: 1
2020-11-08 14:42:00.888  INFO 8364 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: tag
2020-11-08 14:42:01.451  INFO 8364 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/footer/newblog', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.IndexController.footerNewBlogs', args参数：[1, 5, {}]}
2020-11-08 14:42:01.452 DEBUG 8364 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.getNewBlogs         : ==>  Preparing: select b.id, b.title, b.update_time from blog.t_blog b WHERE b.published order by update_time desc limit 3
2020-11-08 14:42:01.453 DEBUG 8364 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.getNewBlogs         : ==> Parameters: 
2020-11-08 14:42:01.454 DEBUG 8364 --- [http-nio-8080-exec-5] c.s.p.dao.BlogMapper.getNewBlogs         : <==      Total: 3
2020-11-08 14:42:01.454  INFO 8364 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: fragments :: newBlogList
2020-11-08 14:42:07.236  INFO 8364 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/login', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.LoginController.login', args参数：[admin, admin, org.apache.catalina.session.StandardSessionFacade@2525d422, {}]}
2020-11-08 14:42:07.272 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.d.U.queryByUsernameAndPassword     : ==>  Preparing: select id,nickname,avatar,email from blog.t_user where username = ? and password = ?;
2020-11-08 14:42:07.273 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.d.U.queryByUsernameAndPassword     : ==> Parameters: admin(String), 21232f297a57a5a743894a0e4a801fc3(String)
2020-11-08 14:42:07.279 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.d.U.queryByUsernameAndPassword     : <==      Total: 1
2020-11-08 14:42:07.283  INFO 8364 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/index
2020-11-08 14:42:09.363  INFO 8364 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/tags;jsessionid=CF64AC1AEDD00F8DCC4000A9440C316B', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TagController.showTags', args参数：[1, {}]}
2020-11-08 14:42:09.387 DEBUG 8364 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.selectAllTags_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_tag
2020-11-08 14:42:09.388 DEBUG 8364 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.selectAllTags_COUNT  : ==> Parameters: 
2020-11-08 14:42:09.395 DEBUG 8364 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.selectAllTags_COUNT  : <==      Total: 1
2020-11-08 14:42:09.404 DEBUG 8364 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.selectAllTags        : ==>  Preparing: SELECT id, name FROM blog.t_tag order by id desc LIMIT ?
2020-11-08 14:42:09.407 DEBUG 8364 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.selectAllTags        : ==> Parameters: 5(Integer)
2020-11-08 14:42:09.417 DEBUG 8364 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.selectAllTags        : <==      Total: 5
2020-11-08 14:42:09.420  INFO 8364 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: /admin/tags
2020-11-08 14:42:12.520  INFO 8364 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/types', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TypeController.getTypes', args参数：[{}, 1]}
2020-11-08 14:42:12.544 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_type
2020-11-08 14:42:12.545 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : ==> Parameters: 
2020-11-08 14:42:12.550 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.d.TypeMapper.selectAllTypes_COUNT  : <==      Total: 1
2020-11-08 14:42:12.554 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.dao.TypeMapper.selectAllTypes      : ==>  Preparing: SELECT id, name FROM blog.t_type order by id desc LIMIT ?
2020-11-08 14:42:12.558 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.dao.TypeMapper.selectAllTypes      : ==> Parameters: 5(Integer)
2020-11-08 14:42:12.568 DEBUG 8364 --- [http-nio-8080-exec-1] c.s.p.dao.TypeMapper.selectAllTypes      : <==      Total: 5
2020-11-08 14:42:12.574  INFO 8364 --- [http-nio-8080-exec-1] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: admin/types
2020-11-08 14:42:13.687  INFO 8364 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/tags', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TagController.showTags', args参数：[1, {}]}
2020-11-08 14:42:13.689 DEBUG 8364 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.selectAllTags_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_tag
2020-11-08 14:42:13.689 DEBUG 8364 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.selectAllTags_COUNT  : ==> Parameters: 
2020-11-08 14:42:13.690 DEBUG 8364 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.selectAllTags_COUNT  : <==      Total: 1
2020-11-08 14:42:13.692 DEBUG 8364 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.selectAllTags        : ==>  Preparing: SELECT id, name FROM blog.t_tag order by id desc LIMIT ?
2020-11-08 14:42:13.692 DEBUG 8364 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.selectAllTags        : ==> Parameters: 5(Integer)
2020-11-08 14:42:13.695 DEBUG 8364 --- [http-nio-8080-exec-5] c.s.p.dao.TagMapper.selectAllTags        : <==      Total: 5
2020-11-08 14:42:13.695  INFO 8364 --- [http-nio-8080-exec-5] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: /admin/tags
2020-11-08 14:42:15.167  INFO 8364 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/tags', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TagController.showTags', args参数：[2, {}]}
2020-11-08 14:42:15.171 DEBUG 8364 --- [http-nio-8080-exec-7] c.s.p.dao.TagMapper.selectAllTags_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_tag
2020-11-08 14:42:15.172 DEBUG 8364 --- [http-nio-8080-exec-7] c.s.p.dao.TagMapper.selectAllTags_COUNT  : ==> Parameters: 
2020-11-08 14:42:15.175 DEBUG 8364 --- [http-nio-8080-exec-7] c.s.p.dao.TagMapper.selectAllTags_COUNT  : <==      Total: 1
2020-11-08 14:42:15.178 DEBUG 8364 --- [http-nio-8080-exec-7] c.s.p.dao.TagMapper.selectAllTags        : ==>  Preparing: SELECT id, name FROM blog.t_tag order by id desc LIMIT ?, ?
2020-11-08 14:42:15.180 DEBUG 8364 --- [http-nio-8080-exec-7] c.s.p.dao.TagMapper.selectAllTags        : ==> Parameters: 5(Integer), 5(Integer)
2020-11-08 14:42:15.184 DEBUG 8364 --- [http-nio-8080-exec-7] c.s.p.dao.TagMapper.selectAllTags        : <==      Total: 5
2020-11-08 14:42:15.186  INFO 8364 --- [http-nio-8080-exec-7] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: /admin/tags
2020-11-08 14:42:16.126  INFO 8364 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : RequestLog : RequestLog{url地址：'http://localhost:8080/admin/tags', ip地址：'0:0:0:0:0:0:0:1', classMethod方法名：'com.simplem.personal_blog.controller.admin.TagController.showTags', args参数：[3, {}]}
2020-11-08 14:42:16.130 DEBUG 8364 --- [http-nio-8080-exec-2] c.s.p.dao.TagMapper.selectAllTags_COUNT  : ==>  Preparing: SELECT count(0) FROM blog.t_tag
2020-11-08 14:42:16.131 DEBUG 8364 --- [http-nio-8080-exec-2] c.s.p.dao.TagMapper.selectAllTags_COUNT  : ==> Parameters: 
2020-11-08 14:42:16.133 DEBUG 8364 --- [http-nio-8080-exec-2] c.s.p.dao.TagMapper.selectAllTags_COUNT  : <==      Total: 1
2020-11-08 14:42:16.136 DEBUG 8364 --- [http-nio-8080-exec-2] c.s.p.dao.TagMapper.selectAllTags        : ==>  Preparing: SELECT id, name FROM blog.t_tag order by id desc LIMIT ?, ?
2020-11-08 14:42:16.138 DEBUG 8364 --- [http-nio-8080-exec-2] c.s.p.dao.TagMapper.selectAllTags        : ==> Parameters: 10(Integer), 5(Integer)
2020-11-08 14:42:16.143 DEBUG 8364 --- [http-nio-8080-exec-2] c.s.p.dao.TagMapper.selectAllTags        : <==      Total: 4
2020-11-08 14:42:16.144  INFO 8364 --- [http-nio-8080-exec-2] c.s.personal_blog.aspect.LogAspect       : Result 返回结果: /admin/tags
